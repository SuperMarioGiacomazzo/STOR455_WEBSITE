Cylinder.tabulate = table(cars$Cylinders)
Cylinder=data.frame(Cylinders=c("four","five","six"),
Count=c(159,11,24))
ggplot(Cylinder, aes(x = "", y = Count, fill = Cylinders)) +
geom_col(color = "black") +
geom_text(aes(label = Count),
position = position_stack(vjust = 0.5)) +
coord_polar(theta = "y")
ggplot(data=cars) +
geom_bar(aes(x=Body,fill=Drive)) +
scale_fill_manual("Drive",values=c("darkolivegreen","deeppink","ivory3")) +
theme_bw()
ggplot(cars) +
geom_dotplot(aes(x=City_MPG))
ggplot(cars) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
ggplot(cars) +
stat_density_2d(aes(x=Length, y=Width,fill = ..level..), geom = "polygon", colour="white")
cars.summary=cars %>%
group_by(Body,Number_Doors) %>%
summarize(avg_hwy_mpg=mean(Hwy_MPG))
ars %>%
group_by(Body,Number_Doors) %>%
summarize(avg_hwy_mpg=mean(Hwy_MPG))
cars %>%
group_by(Body,Number_Doors)
cars %>%
group_by(Body,Number_Doors) %>%
summarize(avg_hwy_mpg=mean(Hwy_MPG))
cars.summary=cars %>%
group_by(Body,Number_Doors) %>%
summarize(avg_hwy_mpg=mean(Hwy_MPG))
ggplot(cars.summary) +
geom_tile(aes(x=Body,y=Number_Doors,fill=avg_))
cars.summary=cars %>%
group_by(Body,Number_Doors) %>%
summarize(avg_hwy_mpg=mean(Hwy_MPG))
ggplot(cars.summary) +
geom_tile(aes(x=Body,y=Number_Doors,fill=avg_hwy_mpg))
cars.summary=cars %>%
group_by(Body,Number_Doors) %>%
summarize(avg_hwy_mpg=mean(Hwy_MPG))
ggplot(cars.summary) +
geom_tile(aes(x=Body,y=Number_Doors,fill=avg_hwy_mpg)) +
scale_fill_gradient(low = "red", high = "white")
cars.summary=cars %>%
group_by(Body,Number_Doors) %>%
summarize(avg_hwy_mpg=mean(Hwy_MPG))
ggplot(cars.summary) +
geom_tile(aes(x=Body,y=Number_Doors,fill=avg_hwy_mpg),color="black") +
scale_fill_gradient(low = "red", high = "gray")
cars.summary=cars %>%
group_by(Body,Number_Doors) %>%
summarize(avg_hwy_mpg=mean(Hwy_MPG))
ggplot(cars.summary) +
geom_tile(aes(x=Body,y=Number_Doors,fill=avg_hwy_mpg),color="black") +
scale_fill_gradient(low = "red", high = "gray")+
geom_text(aes(label = avg_hwy_mpg), color = "black", size = 4) +
cars.summary=cars %>%
group_by(Body,Number_Doors) %>%
summarize(avg_hwy_mpg=mean(Hwy_MPG))
ggplot(cars.summary) +
geom_tile(aes(x=Body,y=Number_Doors,fill=avg_hwy_mpg),color="black") +
scale_fill_gradient(low = "red", high = "gray")+
geom_text(aes(label = avg_hwy_mpg), color = "black", size = 4)
ggplot(cars.summary) +
geom_tile(aes(x=Body,y=Number_Doors,fill=avg_hwy_mpg),color="black") +
scale_fill_gradient(low = "red", high = "gray"
ggplot(cars.summary) +
cars.summary=cars %>%
group_by(Body,Number_Doors) %>%
summarize(avg_hwy_mpg=mean(Hwy_MPG))
ggplot(cars.summary) +
geom_tile(aes(x=Body,y=Number_Doors,fill=avg_hwy_mpg),color="black") +
scale_fill_gradient(low = "red", high = "gray") +
geom_text(aes(label = avg_hwy_mpg), color = "black", size = 4) +
coord_fixed()
ggplot(cars.summary) +
geom_tile(aes(x=Body,y=Number_Doors,fill=avg_hwy_mpg),color="black") +
scale_fill_gradient(low = "red", high = "gray")
library(Stat2Data)
Survey1
Handwrt
Handwrt
Handwrt
library(Stat2Data)
data(Handwriting)
View(Handwriting)
View(Handwriting)
Handwriting$Gender==0
Gender0 = Handwriting[Handwriting$Gender==0,]
Gender1 = Handwriting[Handwriting$Gender==1,]
View(Gender0)
Gender0$Survey1
Gender1$Survey1
mean(Gender0$Survey1,na.rm=T)
mean(Gender1$Survey1,na.rm=T)
boxplot(Handwriting$Survey1~Handwriting$Gender)
mean(Gender0$Survey1,na.rm=T)
mean(Gender1$Survey1,na.rm=T)
Gender0
mean(Gender0$Survey1,na.rm=T)
subset(Handwriting, Gender==0)
subset(Handwriting, Survey1>50)
ggplot(cars.summary) +
geom_tile(aes(x=Body,y=Number_Doors,fill=avg_hwy_mpg),color="black") +
scale_fill_gradient(low = "red", high = "gray") +
geom_text(aes(label = avg_hwy_mpg), color = "white", size = 4) +
coord_fixed()
ggplot(cars.summary) +
geom_tile(aes(x=Body,y=Number_Doors,fill=avg_hwy_mpg),color="black") +
scale_fill_gradient(low = "red", high = "gray") +
geom_text(aes(x=Body,y=Number_Doors,label = avg_hwy_mpg), color = "white", size = 4)
cars.summary=cars %>%
group_by(Body,Number_Doors) %>%
summarize(avg_hwy_mpg=round(mean(Hwy_MPG),2))
ggplot(cars.summary) +
geom_tile(aes(x=Body,y=Number_Doors,fill=avg_hwy_mpg),color="black") +
scale_fill_gradient(low = "red", high = "gray") +
geom_text(aes(x=Body,y=Number_Doors,label = avg_hwy_mpg), color = "white", size = 4) +
coord_fixed()
cars.summary=cars %>%
group_by(Body,Number_Doors) %>%
summarize(avg_hwy_mpg=round(mean(Hwy_MPG),2))
ggplot(cars.summary) +
geom_tile(aes(x=Body,y=Number_Doors,fill=avg_hwy_mpg),color="black") +
scale_fill_gradient(low = "red", high = "gray") +
geom_text(aes(x=Body,y=Number_Doors,label = avg_hwy_mpg), color = "white", size = 8) +
coord_fixed()
cars.summary=cars %>%
group_by(Body,Number_Doors) %>%
summarize(avg_hwy_mpg=round(mean(Hwy_MPG),2))
ggplot(cars.summary) +
geom_tile(aes(x=Body,y=Number_Doors,fill=avg_hwy_mpg),color="black") +
scale_fill_gradient(low = "red", high = "gray") +
geom_text(aes(x=Body,y=Number_Doors,label = avg_hwy_mpg), color = "white", size = 8)
plot(y=stamp$resid,x=1:25,type="l")
#This code chunk is for modifying the global options and for loading required R packages
knitr::opts_chunk$set(echo = TRUE)
library(rmarkdown)
library(tinytex)
library(knitr)
library(readr)
library(mosaic) #Install Mosaic Package
library(Stat2Data) #Install Stat2Data
data("USstamps") # Load Data
stamp = USstamps # Shorten Name
rm(USstamps) #Removes Old Object from Environment
plot(Price ~ Year,data=stamp)
#Remove First Four Years in Data (1885,1917,1919,1932)
#See Exercise 1.33 for Reason Why
stamp2 = subset(stamp, Year > 1932)
plot(Price ~ Year,data=stamp2)
#Linear Regression on Original Data
mod1 <- lm(Price~Year,data=stamp)
mod1
summary(mod1)
plot(Price ~ Year,data=stamp)
abline(mod1)
#Linear Regression on Subsetted Data
mod2 <-lm(Price~Year, data=stamp2)
mod2
summary(mod2)
plot(Price ~ Year,data=stamp2)
abline(mod2)
mod1$residuals
mod1$fitted.values
stamp$fit=mod1$fitted.values
stamp$resid=mod1$residuals
mod2$residuals
mod2$fitted.values
stamp2$fit=mod2$fitted.values
stamp2$resid=mod2$residuals
plot(y=stamp$resid,x=stamp$fit,type="l")
abline(h=0) #h=location of horizontal line
plot(y=stamp2$resid,x=stamp2$fit,type="l")
abline(h=0)
plot(y=stamp$resid,x=1:25,type="l")
abline(h=0) #h=location of horizontal line
plot(y=stamp2$resid,x=stamp2$Year,type="l")
abline(h=0)
plot(y=stamp$resid,x=1:25,type="l")
abline(h=0) #h=location of horizontal line
plot(y=stamp2$resid,x=stamp2$Year,type="l")
abline(h=0)
hist(mod1$residuals,breaks=20)
hist(mod1$residuals,breaks=10)
hist(mod1$residuals,breaks=5)
hist(mod1$residuals,breaks=4)
hist(mod1$residuals,breaks=5)
hist(mod1$residuals,breaks=5)
hist(stamp2$resid,breaks=5)
hist(mod1$residuals,breaks=5) #Remember: We can always plot residuals directly from model object
hist(stamp2$resid,breaks=5) #Remember: We can plot residuals that we saved into our dataset
hist(mod1$residuals,breaks=5) #Remember: We can always plot residuals directly from model object
hist(stamp2$resid,breaks=5) #Remember: We can plot residuals that we saved into our dataset
#This code chunk is for modifying the global options and for loading required R packages
knitr::opts_chunk$set(echo = TRUE)
library(rmarkdown)
library(tinytex)
library(knitr)
library(readr)
library(mosaic) #Install Mosaic Package
library(Stat2Data) #Install Stat2Data
data("USstamps") # Load Data
stamp = USstamps # Shorten Name
rm(USstamps) #Removes Old Object from Environment
plot(Price ~ Year,data=stamp)
#Remove First Four Years in Data (1885,1917,1919,1932)
#See Exercise 1.33 for Reason Why
stamp2 = subset(stamp, Year > 1932)
plot(Price ~ Year,data=stamp2)
#Linear Regression on Original Data
mod1 <- lm(Price~Year,data=stamp)
mod1
summary(mod1)
plot(Price ~ Year,data=stamp)
abline(mod1)
#Linear Regression on Subsetted Data
mod2 <-lm(Price~Year, data=stamp2)
mod2
summary(mod2)
plot(Price ~ Year,data=stamp2)
abline(mod2)
mod1$residuals
mod1$fitted.values
stamp$fit=mod1$fitted.values
stamp$resid=mod1$residuals
mod2$residuals
mod2$fitted.values
stamp2$fit=mod2$fitted.values
stamp2$resid=mod2$residuals
plot(y=stamp$resid,x=stamp$fit,type="l")
abline(h=0) #h=location of horizontal line
plot(y=stamp2$resid,x=stamp2$fit,type="l")
abline(h=0)
plot(y=stamp$resid,x=1:25,type="l")
abline(h=0) #h=location of horizontal line
plot(y=stamp2$resid,x=stamp2$Year,type="l")
abline(h=0)
hist(mod1$residuals,breaks=5) #Remember: We can always plot residuals directly from model object
hist(stamp2$resid,breaks=5) #Remember: We can plot residuals that we saved into our dataset
boxplot(mod1$residuals)
boxplot(mod2$residuals)
hist(mod1$residuals,breaks=5) #Remember: We can always plot residuals directly from model object
hist(stamp2$resid,breaks=5) #Remember: We can plot residuals that we saved into our dataset
boxplot(stamp1$resid)
boxplot(stamp$resid)
boxplot(mod2$residuals)
boxplot(stamp$resid)
boxplot(mod2$residuals)
hist(mod1$residuals,breaks=5) #Remember: We can always plot residuals directly from model object
hist(stamp2$resid,breaks=5) #Remember: We can plot residuals that we saved into our dataset
boxplot(stamp$resid)
boxplot(mod2$residuals)
qqnorm(stamp$resid)
qqline(stamp$resid)
qqnorm(stamp$resid)
qqline(stamp$resid)
qqnorm(stamp$resid)
qqline(stamp$resid)
qqnorm(stamp$resid)
qqline(stamp$resid)
qqnorm(stamp2$resid)
qqline(stamp2$resid)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
mammal = msleep[1:10,c("name","vore","conservation","brainwt","bodywt")]
kable(mammal)
str(na.omit(mammal))
unique(vore)
dim(mammal)[1]
mammal %>%
ggplot() +
geom_point(BLANK1)
mammal %>%
ggplot() +
geom_point(aes(x=brainwt,y=bodywt,size=vore))
mammal %>%
ggplot() +
geom_smooth(BLANK1)
mammal %>%
ggplot() +
geom_smooth(aes(x=bodywt,y=brainwt),se=FALSE,method="lm")
mammal %>%
ggplot() +
geom_smooth(aes(x=bodywt,y=brainwt),se=FALSE,method=lm)
mammal %>%
ggplot() +
geom_smooth(aes(x=bodywt,y=brainwt),se=FALSE,method=lm)
mammal %>%
ggplot() +
geom_smooth(aes(x=bodywt,y=brainwt),se=FALSE,method=lm)
mammal %>%
ggplot() +
geom_smooth(aes(x=bodywt,y=brainwt),se=FALSE)
mammal %>%
ggplot() +
geom_smooth(aes(x=bodywt,y=brainwt),se=FALSE,method=lm)
mammal %>%
ggplot() +
geom_smooth(aes(x=bodywt,y=brainwt),lm, se=F)
knitr::opts_chunk$set(echo = TRUE)
library(Stat2Data)
library(mosaic)
data("Houses")
mod = lm(Price ~ Size + Lot, data=Houses)
Houses$Predicted = fitted(mod)
plot(x=Houses$Price,y=Houses$Predicted,
xlim=c(100000,400000),
ylim=c(100000,400000))
abline(a=0,b=1,lwd=3,lty=3)
knitr::opts_chunk$set(echo = TRUE)
library(mosaic)
read_csv("lego.csv")
library(mosaic)
lego = read_csv("lego.csv")
View(lego)
unique(lego$Theme)
table(lego$Theme)
lego_2theme = subset(lego, Theme == "Star Wars"| Theme == "Friends")
lego_2theme
library(mosaic)
lego = read_csv("lego.csv")
lego_2theme = subset(lego, Theme == "Star Wars"| Theme == "Friends")
library(mosaic)
lego = read_csv("lego.csv")
lego_2theme = subset(lego, Theme == "Star Wars"| Theme == "Friends")
library(mosaic)
lego = read.csv("lego.csv")
lego_2theme = subset(lego, Theme == "Star Wars"| Theme == "Friends")
str(lego_2theme)
lego_2theme[,c("Theme","Pieces","Amazon_Price")]
t.test(Amazon_Price ~ Theme, data=lego2theme)
library(mosaic)
lego = read.csv("lego.csv")
lego_2theme = subset(lego, Theme == "Star Wars"| Theme == "Friends")
lego_2theme = lego_2theme[,c("Theme","Pieces","Amazon_Price")]
str(lego_2theme)
t.test(Amazon_Price ~ Theme, data=lego_2theme)
t.test(Amazon_Price ~ Theme,, data=lego_2theme)
t.test(Amazon_Price ~ Theme,var.equal=TRUE, data=lego_2theme)
mod = lm(Amazon_Price ~ Theme, data=lego_2theme)
summary(mod)
confint(mod)
mod = lm(Amazon_Price ~ Theme, data=lego_2theme)
summary(mod)
confint(mod)
boxplot(Amazon_Price ~ Theme, data=lego2theme)
boxplot(Amazon_Price ~ Theme, data=lego_2theme)
var(lego_2theme$Amazon_Price[which(lego_2theme$Theme=="Friends")])
var(lego_2theme$Amazon_Price[which(lego_2theme$Theme=="Star Wars")],na.rm=T)
var(lego_2theme$Amazon_Price[which(lego_2theme$Theme=="Friends")],na.rm=T)
var(lego_2theme$Amazon_Price[which(lego_2theme$Theme=="Star Wars")],na.rm=T)
var(lego_2theme$Amazon_Price[which(lego_2theme$Theme=="Friends")],na.rm=T)
boxplot(Amazon_Price ~ Theme, data=lego_2theme)
var(lego_2theme$Amazon_Price[which(lego_2theme$Theme=="Friends")],na.rm=T)
var(lego_2theme$Amazon_Price[which(lego_2theme$Theme=="Star Wars")],na.rm=T)
42.26+38.44
mod2 = lm(Amazon_Price ~Pieces + Theme, data= lego_2theme)
plot(mod2)
mod2 = lm(Amazon_Price ~Pieces + Theme, data= lego_2theme)
summary(mod2)
mod2
summary(mod2)
mod2 = lm(Amazon_Price ~Pieces + Theme, data= lego_2theme)
summary(mod2)
confint(mod2)
plot(Amazon_Price~Pieces,data=lego_2theme)
plot(Amazon_Price~Pieces+Theme,data=lego_2theme)
plot(Amazon_Price~Pieces+Theme,data=lego_2theme)
plot(Amazon_Price~Pieces,data=lego_2theme)
mod2 = lm(Amazon_Price ~Pieces + Theme, data= lego_2theme)
summary(mod2)
confint(mod2)
plot(Amazon_Price~Pieces,data=lego_2theme)
points(x=lego_2theme$Pieces, y=-0.08+0.14*lego_2theme$Pieces,pch="F")
plot(Amazon_Price~Pieces,data=lego_2theme)
points(x=lego_2theme$Pieces, y=-0.08+0.14*lego_2theme$Pieces,pch="F",add=T)
plot(Amazon_Price~Pieces,data=lego_2theme)
curve(-0.08+0.14*x,col="blue")
plot(Amazon_Price~Pieces,data=lego_2theme)
curve(-0.08+0.14*x,col="blue",add=TRUE)
plot(Amazon_Price~Pieces, col="blue",
data=subset(lego_2theme,Theme=='Star Wars'))
points(Amazon_Price~Pieces, col="green",
data=subset(lego_2theme,Theme=='Friends'))
B_Int = summary(modlego2)$coef[1,1]
plot(Amazon_Price~Pieces, col="blue",
data=subset(lego_2theme,Theme=='Star Wars'))
points(Amazon_Price~Pieces, col="green",
data=subset(lego_2theme,Theme=='Friends'))
B_Int = summary(mod2)$coef[1,1]
B_Pieces = summary(mod2)$coef[2,1]
B_Theme = summary(mod2)$coef[3,1]
abline(
B_Int,
B_Pieces,
col = "blue",
)
abline(
B_Int + B_Theme,
B_Pieces,
col = "green",
)
plot(Amazon_Price~Pieces, col="blue",
data=subset(lego_2theme,Theme=='Star Wars'))
points(Amazon_Price~Pieces, col="green",
data=subset(lego_2theme,Theme=='Friends'))
B_Int = summary(mod2)$coef[1,1]
B_Pieces = summary(mod2)$coef[2,1]
B_Theme = summary(mod2)$coef[3,1]
abline(
B_Int,
B_Pieces,
col = "blue",
)
abline(
B_Int + B_Theme,
B_Pieces,
col = "green",
)
plot(Amazon_Price~Pieces, col="blue",
data=subset(lego_2theme,Theme=='Star Wars'))
points(Amazon_Price~Pieces, col="green",
data=subset(lego_2theme,Theme=='Friends'))
B_Int = summary(mod2)$coef[1,1]
B_Pieces = summary(mod2)$coef[2,1]
B_Theme = summary(mod2)$coef[3,1]
abline(
B_Int,
B_Pieces,
col = "blue",
)
abline(
B_Int + B_Theme,
B_Pieces,
col = "red",
)
plot(Amazon_Price~Pieces, col="blue",
data=subset(lego_2theme,Theme=='Star Wars'))
points(Amazon_Price~Pieces, col="red",
data=subset(lego_2theme,Theme=='Friends'))
B_Int = summary(mod2)$coef[1,1]
B_Pieces = summary(mod2)$coef[2,1]
B_Theme = summary(mod2)$coef[3,1]
abline(
B_Int,
B_Pieces,
col = "blue",
)
abline(
B_Int + B_Theme,
B_Pieces,
col = "red",
)
mod3 = lm(Amazon_Price ~Pieces + Theme + I(Pieces*Theme), data= lego_2theme)
mod3 = lm(Amazon_Price ~Pieces + Theme + I(Pieces*Theme), data= lego_2theme)
mod3 = lm(Amazon_Price ~Pieces + Theme + Pieces*Theme, data= lego_2theme)
summary(mod2)
confint(mod2)
mod3 = lm(Amazon_Price ~Pieces + Theme + Pieces*Theme, data= lego_2theme)
summary(mod3)
confint(mod3)
summary(mod2)$coef
plot(Amazon_Price~Pieces, col="blue",
data=subset(lego_2theme,Theme=='Star Wars'))
points(Amazon_Price~Pieces, col="red",
data=subset(lego_2theme,Theme=='Friends'))
B_Int = summary(mod3)$coef[1,1]
B_Pieces = summary(mod3)$coef[2,1]
B_Theme = summary(mod3)$coef[3,1]
abline(
B_Int,
B_Pieces,
col = "blue",
)
abline(
B_Int + B_Theme,
B_Pieces,
col = "red",
)
summary(mod3)$coef
plot(Amazon_Price~Pieces, col="blue",
data=subset(lego_2theme,Theme=='Star Wars'))
points(Amazon_Price~Pieces, col="red",
data=subset(lego_2theme,Theme=='Friends'))
B_Int = summary(mod3)$coef[1,1]
B_Pieces = summary(mod3)$coef[2,1]
B_Theme = summary(mod3)$coef[3,1]
B_PiecesXTheme = summary(mod3)$coef[4,1]
plot(Amazon_Price~Pieces, col="blue",
data=subset(lego_2theme,Theme=='Star Wars'))
points(Amazon_Price~Pieces, col="red",
data=subset(lego_2theme,Theme=='Friends'))
B_Int = summary(mod3)$coef[1,1]
B_Pieces = summary(mod3)$coef[2,1]
B_Theme = summary(mod3)$coef[3,1]
B_PiecesXTheme = summary(mod3)$coef[4,1]
abline(
B_Int,
B_Pieces,
col = "blue",
)
abline(
B_Int + B_Theme,
B_Pieces + B_PiecesXTheme,
col = "red",
)
mod3 = lm(Amazon_Price ~Pieces + Theme + Pieces*Theme, data= lego_2theme)
summary(mod3)
