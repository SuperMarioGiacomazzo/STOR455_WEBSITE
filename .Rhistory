col = "red",
)
mod3 = lm(Amazon_Price ~Pieces + Theme + I(Pieces*Theme), data= lego_2theme)
mod3 = lm(Amazon_Price ~Pieces + Theme + I(Pieces*Theme), data= lego_2theme)
mod3 = lm(Amazon_Price ~Pieces + Theme + Pieces*Theme, data= lego_2theme)
summary(mod2)
confint(mod2)
mod3 = lm(Amazon_Price ~Pieces + Theme + Pieces*Theme, data= lego_2theme)
summary(mod3)
confint(mod3)
summary(mod2)$coef
plot(Amazon_Price~Pieces, col="blue",
data=subset(lego_2theme,Theme=='Star Wars'))
points(Amazon_Price~Pieces, col="red",
data=subset(lego_2theme,Theme=='Friends'))
B_Int = summary(mod3)$coef[1,1]
B_Pieces = summary(mod3)$coef[2,1]
B_Theme = summary(mod3)$coef[3,1]
abline(
B_Int,
B_Pieces,
col = "blue",
)
abline(
B_Int + B_Theme,
B_Pieces,
col = "red",
)
summary(mod3)$coef
plot(Amazon_Price~Pieces, col="blue",
data=subset(lego_2theme,Theme=='Star Wars'))
points(Amazon_Price~Pieces, col="red",
data=subset(lego_2theme,Theme=='Friends'))
B_Int = summary(mod3)$coef[1,1]
B_Pieces = summary(mod3)$coef[2,1]
B_Theme = summary(mod3)$coef[3,1]
B_PiecesXTheme = summary(mod3)$coef[4,1]
plot(Amazon_Price~Pieces, col="blue",
data=subset(lego_2theme,Theme=='Star Wars'))
points(Amazon_Price~Pieces, col="red",
data=subset(lego_2theme,Theme=='Friends'))
B_Int = summary(mod3)$coef[1,1]
B_Pieces = summary(mod3)$coef[2,1]
B_Theme = summary(mod3)$coef[3,1]
B_PiecesXTheme = summary(mod3)$coef[4,1]
abline(
B_Int,
B_Pieces,
col = "blue",
)
abline(
B_Int + B_Theme,
B_Pieces + B_PiecesXTheme,
col = "red",
)
mod3 = lm(Amazon_Price ~Pieces + Theme + Pieces*Theme, data= lego_2theme)
summary(mod3)
#This code chunk is for modifying the global options and for loading required R packages
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999) #Prevents the use of scientific notation
library(leaps)
library(Stat2Data)
#Create Indicator Variables Manually for Plural Variable
NCB$Twins = ifelse(NCB$Plural==2,1,0)
#Create Indicator Variables Manually for Plural Variable
NCB$Twins = ifelse(NCB$Plural==2,1,0)
#This code chunk is for modifying the global options and for loading required R packages
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999) #Prevents the use of scientific notation
library(leaps)
library(Stat2Data)
data("NCbirths")
NCB = NCbirths[,c("BirthWeightOz","Weeks","Plural","MomRace")]
str(NCB)
#Fit Model with Only MomRace as Predictor Variable
mod.race.1 = lm(BirthWeightOz ~ MomRace,data=NCB)
#Notice that Black is the Current Reference Category
summary(mod.race.1)
#Confidence Intervals for Difference in Mean Birth Weight Between Each Other Race and Black
confint(mod.race.1)
#Representation of Race Groups
table(NCB$MomRace)
#Make Reference Category the Majority: We Can Do This Easily Since MomRace is Factor Variable
NCB$MomRace = relevel(NCB$MomRace,ref=4)
#Refit Model (Compare to Exercise 4.13 in Textbook)
mod.race.2 = lm(BirthWeightOz ~ MomRace,data=NCB)
summary(mod.race.2)
confint(mod.race.2)
#Add Predictions and Residuals to Data
NCB$Pred1 = fitted(mod.race.2)
NCB$Res1 = residuals(mod.race.2)
#Check Assumptions
hist(NCB$Res1) #Normality?
plot(mod.race.2,which=c(2)) #Normality?
plot(mod.race.2, which=c(1)) #Homoscedasticity?
boxplot(Res1~MomRace,data=NCB) #Homoscedasticity?
#Plot of Model (Defaults to Boxplots since x is a Factor Variable)
plot(x=NCB$MomRace,y=NCB$BirthWeightOz)
points(NCB$MomRace,NCB$Pred1,col="red",pch=17,cex=2)
#Fit Model with Only Weeks as Predictor Variable
mod.weeks.1 = lm(BirthWeightOz ~ Weeks,data=NCB)
summary(mod.weeks.1)
NCB$Pred2[!is.na(NCB$Weeks)] = fitted(mod.weeks.1)
NCB$Res2[!is.na(NCB$Weeks)] = residuals(mod.weeks.1)
#Fit Model with Weeks + MomRace as Predictor Variables
mod.weeks.2 = lm(BirthWeightOz~ Weeks + MomRace,data=NCB)
summary(mod.weeks.2)
NCB$Pred3[!is.na(NCB$Weeks)] = fitted(mod.weeks.2)
NCB$Res3[!is.na(NCB$Weeks)] = residuals(mod.weeks.2)
#Fit Model to Include Interaction Variable for Slope
mod.weeks.3 = lm(BirthWeightOz~ Weeks + MomRace + Weeks*MomRace,data=NCB)
summary(mod.weeks.3)
NCB$Pred4[!is.na(NCB$Weeks)] = fitted(mod.weeks.3)
NCB$Res4[!is.na(NCB$Weeks)] = residuals(mod.weeks.3)
#Visualize mod.weeks.3
library(HelpersMG) #Helpful Function Called plot_add()
plot(BirthWeightOz ~ Weeks , data=subset(NCB,MomRace=="black"))
plot_add(Pred4 ~ Weeks , data=subset(NCB,MomRace=="black"),type="l",lwd=2)
plot_add(BirthWeightOz ~ Weeks , data=subset(NCB,MomRace=="hispanic"),col="red")
plot_add(Pred4 ~ Weeks , data=subset(NCB,MomRace=="hispanic"),type="l",col="red",lwd=2)
plot_add(BirthWeightOz ~ Weeks , data=subset(NCB,MomRace=="other"),col="purple")
plot_add(Pred4 ~ Weeks , data=subset(NCB,MomRace=="other"),type="l",col="purple",lwd=2)
plot_add(BirthWeightOz ~ Weeks , data=subset(NCB,MomRace=="white"),col="darkgreen")
plot_add(Pred4 ~ Weeks , data=subset(NCB,MomRace=="white"),type="l",col="darkgreen",lwd=2)
#Create Indicator Variables Manually for Plural Variable
NCB$Twins = ifelse(NCB$Plural==2,1,0)
NCB$Triplets = ifelse(NCB$Plural==3,1,0)
NCB$Plural=NULL
#Stepwise Regression on Full Model
mod.full = lm(BirthWeightOz ~ Weeks + MomRace + Twins + Triplets +
Weeks*MomRace+Weeks*Twins+Weeks*Triplets,data=NCB)
mod.empty = lm(BirthWeightOz ~ 1,data=NCB)
mod.step = step(mod.empty,scope=list(upper=mod.full),direction="both")
#Create Indicator Variables Manually for Plural Variable
NCB$Twins = ifelse(NCB$Plural==2,1,0)
#Create Indicator Variables Manually for Plural Variable
NCB$Twins = ifelse(NCB$Plural==2,1,0)
#This code chunk is for modifying the global options and for loading required R packages
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999) #Prevents the use of scientific notation
library(leaps)
library(Stat2Data)
data("NCbirths")
NCB = NCbirths[,c("BirthWeightOz","Weeks","Plural","MomRace")]
str(NCB)
#Fit Model with Only MomRace as Predictor Variable
mod.race.1 = lm(BirthWeightOz ~ MomRace,data=NCB)
#Notice that Black is the Current Reference Category
summary(mod.race.1)
#Confidence Intervals for Difference in Mean Birth Weight Between Each Other Race and Black
confint(mod.race.1)
#Representation of Race Groups
table(NCB$MomRace)
#Make Reference Category the Majority: We Can Do This Easily Since MomRace is Factor Variable
NCB$MomRace = relevel(NCB$MomRace,ref=4)
#Refit Model (Compare to Exercise 4.13 in Textbook)
mod.race.2 = lm(BirthWeightOz ~ MomRace,data=NCB)
summary(mod.race.2)
confint(mod.race.2)
#Add Predictions and Residuals to Data
NCB$Pred1 = fitted(mod.race.2)
NCB$Res1 = residuals(mod.race.2)
#Check Assumptions
hist(NCB$Res1) #Normality?
plot(mod.race.2,which=c(2)) #Normality?
plot(mod.race.2, which=c(1)) #Homoscedasticity?
boxplot(Res1~MomRace,data=NCB) #Homoscedasticity?
#Plot of Model (Defaults to Boxplots since x is a Factor Variable)
plot(x=NCB$MomRace,y=NCB$BirthWeightOz)
points(NCB$MomRace,NCB$Pred1,col="red",pch=17,cex=2)
#Fit Model with Only Weeks as Predictor Variable
mod.weeks.1 = lm(BirthWeightOz ~ Weeks,data=NCB)
summary(mod.weeks.1)
NCB$Pred2[!is.na(NCB$Weeks)] = fitted(mod.weeks.1)
NCB$Res2[!is.na(NCB$Weeks)] = residuals(mod.weeks.1)
#Fit Model with Weeks + MomRace as Predictor Variables
mod.weeks.2 = lm(BirthWeightOz~ Weeks + MomRace,data=NCB)
summary(mod.weeks.2)
NCB$Pred3[!is.na(NCB$Weeks)] = fitted(mod.weeks.2)
NCB$Res3[!is.na(NCB$Weeks)] = residuals(mod.weeks.2)
#Fit Model to Include Interaction Variable for Slope
mod.weeks.3 = lm(BirthWeightOz~ Weeks + MomRace + Weeks*MomRace,data=NCB)
summary(mod.weeks.3)
NCB$Pred4[!is.na(NCB$Weeks)] = fitted(mod.weeks.3)
NCB$Res4[!is.na(NCB$Weeks)] = residuals(mod.weeks.3)
#Visualize mod.weeks.3
library(HelpersMG) #Helpful Function Called plot_add()
plot(BirthWeightOz ~ Weeks , data=subset(NCB,MomRace=="black"))
plot_add(Pred4 ~ Weeks , data=subset(NCB,MomRace=="black"),type="l",lwd=2)
plot_add(BirthWeightOz ~ Weeks , data=subset(NCB,MomRace=="hispanic"),col="red")
plot_add(Pred4 ~ Weeks , data=subset(NCB,MomRace=="hispanic"),type="l",col="red",lwd=2)
plot_add(BirthWeightOz ~ Weeks , data=subset(NCB,MomRace=="other"),col="purple")
plot_add(Pred4 ~ Weeks , data=subset(NCB,MomRace=="other"),type="l",col="purple",lwd=2)
plot_add(BirthWeightOz ~ Weeks , data=subset(NCB,MomRace=="white"),col="darkgreen")
plot_add(Pred4 ~ Weeks , data=subset(NCB,MomRace=="white"),type="l",col="darkgreen",lwd=2)
#Create Indicator Variables Manually for Plural Variable
NCB$Twins = ifelse(NCB$Plural==2,1,0)
NCB$Triplets = ifelse(NCB$Plural==3,1,0)
NCB$Plural=NULL
#Stepwise Regression on Full Model
mod.full = lm(BirthWeightOz ~ Weeks + MomRace + Twins + Triplets +
Weeks*MomRace+Weeks*Twins+Weeks*Triplets,data=na.omit(NCB))
mod.empty = lm(BirthWeightOz ~ 1,data=na.omit(NCB))
mod.step = step(mod.empty,scope=list(upper=mod.full),direction="both")
summary(mod.step)
AIC(mod.step)
#Create Indicator Variables Manually for Plural Variable
NCB$Twins = ifelse(NCB$Plural==2,1,0)
#Stepwise Regression on Full Model
mod.full = lm(BirthWeightOz ~ Weeks + MomRace + Twins + Triplets +
Weeks*MomRace+Weeks*Twins+Weeks*Triplets,data=na.omit(NCB))
mod.empty = lm(BirthWeightOz ~ 1,data=na.omit(NCB))
mod.step = step(mod.empty,scope=list(upper=mod.full),direction="both")
summary(mod.step)
AIC(mod.step)
summary(mod.full)$sigma
#Create Indicator Variables Manually for Plural Variable
NCB$Twins = ifelse(NCB$Plural==2,1,0)
#Stepwise Regression on Full Model
mod.full = lm(BirthWeightOz ~ Weeks + MomRace + Twins + Triplets +
Weeks*MomRace+Weeks*Twins+Weeks*Triplets,data=na.omit(NCB))
mod.empty = lm(BirthWeightOz ~ 1,data=na.omit(NCB))
mod.step = step(mod.empty,scope=list(upper=mod.full),scale=summary(mod.full)$sigma,direction="both")
summary(mod.step)
AIC(mod.step)
#This code chunk is for modifying the global options and for loading required R packages
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999) #Prevents the use of scientific notation
library(leaps)
library(Stat2Data)
data("NCbirths")
NCB = NCbirths[,c("BirthWeightOz","Weeks","Plural","MomRace")]
str(NCB)
#Fit Model with Only MomRace as Predictor Variable
mod.race.1 = lm(BirthWeightOz ~ MomRace,data=NCB)
#Notice that Black is the Current Reference Category
summary(mod.race.1)
#Confidence Intervals for Difference in Mean Birth Weight Between Each Other Race and Black
confint(mod.race.1)
#Representation of Race Groups
table(NCB$MomRace)
#Make Reference Category the Majority: We Can Do This Easily Since MomRace is Factor Variable
NCB$MomRace = relevel(NCB$MomRace,ref=4)
#Refit Model (Compare to Exercise 4.13 in Textbook)
mod.race.2 = lm(BirthWeightOz ~ MomRace,data=NCB)
summary(mod.race.2)
confint(mod.race.2)
#Add Predictions and Residuals to Data
NCB$Pred1 = fitted(mod.race.2)
NCB$Res1 = residuals(mod.race.2)
#Check Assumptions
hist(NCB$Res1) #Normality?
plot(mod.race.2,which=c(2)) #Normality?
plot(mod.race.2, which=c(1)) #Homoscedasticity?
boxplot(Res1~MomRace,data=NCB) #Homoscedasticity?
#Plot of Model (Defaults to Boxplots since x is a Factor Variable)
plot(x=NCB$MomRace,y=NCB$BirthWeightOz)
points(NCB$MomRace,NCB$Pred1,col="red",pch=17,cex=2)
#Fit Model with Only Weeks as Predictor Variable
mod.weeks.1 = lm(BirthWeightOz ~ Weeks,data=NCB)
summary(mod.weeks.1)
NCB$Pred2[!is.na(NCB$Weeks)] = fitted(mod.weeks.1)
NCB$Res2[!is.na(NCB$Weeks)] = residuals(mod.weeks.1)
#Fit Model with Weeks + MomRace as Predictor Variables
mod.weeks.2 = lm(BirthWeightOz~ Weeks + MomRace,data=NCB)
summary(mod.weeks.2)
NCB$Pred3[!is.na(NCB$Weeks)] = fitted(mod.weeks.2)
NCB$Res3[!is.na(NCB$Weeks)] = residuals(mod.weeks.2)
#Fit Model to Include Interaction Variable for Slope
mod.weeks.3 = lm(BirthWeightOz~ Weeks + MomRace + Weeks*MomRace,data=NCB)
summary(mod.weeks.3)
NCB$Pred4[!is.na(NCB$Weeks)] = fitted(mod.weeks.3)
NCB$Res4[!is.na(NCB$Weeks)] = residuals(mod.weeks.3)
#Visualize mod.weeks.3
library(HelpersMG) #Helpful Function Called plot_add()
plot(BirthWeightOz ~ Weeks , data=subset(NCB,MomRace=="black"))
plot_add(Pred4 ~ Weeks , data=subset(NCB,MomRace=="black"),type="l",lwd=2)
plot_add(BirthWeightOz ~ Weeks , data=subset(NCB,MomRace=="hispanic"),col="red")
plot_add(Pred4 ~ Weeks , data=subset(NCB,MomRace=="hispanic"),type="l",col="red",lwd=2)
plot_add(BirthWeightOz ~ Weeks , data=subset(NCB,MomRace=="other"),col="purple")
plot_add(Pred4 ~ Weeks , data=subset(NCB,MomRace=="other"),type="l",col="purple",lwd=2)
plot_add(BirthWeightOz ~ Weeks , data=subset(NCB,MomRace=="white"),col="darkgreen")
plot_add(Pred4 ~ Weeks , data=subset(NCB,MomRace=="white"),type="l",col="darkgreen",lwd=2)
#Create Indicator Variables Manually for Plural Variable
NCB$Twins = ifelse(NCB$Plural==2,1,0)
NCB$Triplets = ifelse(NCB$Plural==3,1,0)
NCB$Plural=NULL
NCB2 =na.omit(NCB)
#Stepwise Regression on Full Model
mod.full = lm(BirthWeightOz ~ Weeks + MomRace + Twins + Triplets +
Weeks*MomRace+Weeks*Twins+Weeks*Triplets,data=NCB2)
mod.empty = lm(BirthWeightOz ~ 1,data=NCB2)
mod.step = step(mod.empty,scope=list(upper=mod.full),scale=summary(mod.full)$sigma,direction="both")
summary(mod.step)
AIC(mod.step)
AIC(mod.step)
summary(mod.step)
mod.step = step(mod.empty,scope=list(upper=mod.full),scale=summary(mod.full)$sigma,direction="both")
summary(mod.full)$sigma
mod.step = step(mod.empty,scope=list(upper=mod.full),scale=summary(mod.empty)$sigma,direction="both")
summary(mod.step)
AIC(mod.step)
summary(mod.step)
mod.step = step(mod.empty,scope=list(upper=mod.full),scale=summary(mod.empty)$sigma,direction="both")
#Create Indicator Variables Manually for Plural Variable
NCB$Twins = ifelse(NCB$Plural==2,1,0)
#This code chunk is for modifying the global options and for loading required R packages
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999) #Prevents the use of scientific notation
library(leaps)
library(Stat2Data)
#Create Indicator Variables Manually for Plural Variable
NCB$Twins = COMPLETE
#This code chunk is for modifying the global options and for loading required R packages
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999) #Prevents the use of scientific notation
library(rmarkdown)
library(tinytex)
library(knitr)
library(readr)
library(mosaic)
library(Lock5Data) #Install this Package
library(leaps)  #Install this Package
library(corrplot) #Install this Package
library(PerformanceAnalytics) #Install this Package
library(car) #Install this Package
source("https://raw.githubusercontent.com/JA-McLean/STOR455/master/scripts/ShowSubsets.R")
data("BodyFat") # Load Data
bf = BodyFat
head(bf)
data("BodyFat") # Load Data
bf = BodyFat
head(bf)
data("BodyFat") # Load Data
bf = BodyFat
head(bf)
cor(bf)
round(cor(bf),4)
round(cor(bf),2)
# Correlation Matrix from Base R
round(cor(bf),2)
# Tile Plot of Correlation Matrix (Correlogram) from corrplot package
#Scatterplots of Bodyfat Variable with Each Other Predictor
# Cool Visual from PerformanceAnalytics package
corrplot(cor(bf),type="upper")
plot(Bodyfat~.,data=bf)
library(PerformanceAnalytics)
View(bf)
chart.Correlation(bf[,-1],histogram=TRUE)
mod.full = lm(Bodyfat~.,data=bf)
summary(mod.full)
plot(mod.full)
vif(mod.full) # From car package
#This code chunk is for modifying the global options and for loading required R packages
knitr::opts_chunk$set(echo = TRUE)
library(rmarkdown)
library(tinytex)
library(knitr)
library(mosaic)
library(readr)
library(leaps)
source("https://raw.githubusercontent.com/JA-McLean/STOR455/master/scripts/anova455.R")
Math = read.csv("student-mat.csv")
str(Math)
table(Math$school)
TRAIN = subset(Math,school=="GP")
TEST = subset(Math,school == "MS")
TRAIN$school = NULL
TEST$school = NULL
str(TRAIN)
str(TEST)
TRAIN = subset(Math,school=="GP")
TEST = subset(Math,school == "MS")
TRAIN$school = NULL
TEST$school = NULL
head(TRAIN)
head(TEST)
TRAIN$deltaG = TRAIN$G3-TRAIN$G1
TEST$deltaG = TEST$G3-TEST$G1
head(TRAIN)
head(TEST)
TRAIN$deltaG = TRAIN$G3-TRAIN$G1
TEST$deltaG = TEST$G3-TEST$G1
TRAIN$G1 = NULL
TRAIN$G2 = NULL
TRAIN$G3 =
TEST$G1 = NULL
TEST$G2 = NULL
TEST$G3 = NULL
head(TRAIN)
head(TEST)
#This code chunk is for modifying the global options and for loading required R packages
knitr::opts_chunk$set(echo = TRUE)
library(rmarkdown)
library(tinytex)
library(knitr)
library(mosaic)
library(readr)
library(leaps)
source("https://raw.githubusercontent.com/JA-McLean/STOR455/master/scripts/anova455.R")
Math = read.csv("student-mat.csv")
str(Math)
TRAIN = subset(Math,school=="GP")
TEST = subset(Math,school == "MS")
TRAIN$school = NULL
TEST$school = NULL
head(TRAIN)
head(TEST)
TRAIN$deltaG = TRAIN$G3-TRAIN$G1
TEST$deltaG = TEST$G3-TEST$G1
TRAIN$G1 = NULL
TRAIN$G2 = NULL
TRAIN$G3 =
TEST$G1 = NULL
TEST$G2 = NULL
TEST$G3 = NULL
str(TRAIN[,29:30])
str(TEST[,29:30])
View(Math)
mod.full = lm(deltaG~sex+age+address+famsize+health+Pstatus+Medu+Fedu+famsup+famrel+
studytime+failures+higher+absences+activities+romantic+goout+Dalc+Walc,
data=TRAIN)
summary(mod.full)
mod.empty = lm(deltaG~1,data=TRAIN)
summary(mod.empty)
nodem.mod = lm(deltaG~Pstatus+Medu+Fedu+famsup+famrel+
studytime+failures+higher+absences+activities+romantic+goout+Dalc+Walc,
data=TRAIN)
nopar.mod = lm(deltaG~sex+age+address+famsize+health+
studytime+failures+higher+absences+activities+romantic+goout+Dalc+Walc,
data=TRAIN)
noedu.mod = lm(deltaG~sex+age+address+famsize+health+Pstatus+Medu+Fedu+famsup+famrel+
activities+romantic+goout+Dalc+Walc,
data=TRAIN)
nofree.mod = lm(deltaG~sex+age+address+famsize+health+Pstatus+Medu+Fedu+famsup+famrel+
studytime+failures+higher+absences+Dalc+Walc,
data=TRAIN)
noalc.mod = lm(deltaG~sex+age+address+famsize+health+Pstatus+Medu+Fedu+famsup+famrel+
studytime+failures+higher+absences+activities+romantic+goout,
data=TRAIN)
anova(nodem.mod,full.mod)
mod.nodem = lm(deltaG~Pstatus+Medu+Fedu+famsup+famrel+
studytime+failures+higher+absences+activities+romantic+goout+Dalc+Walc,
data=TRAIN)
mod.nopar = lm(deltaG~sex+age+address+famsize+health+
studytime+failures+higher+absences+activities+romantic+goout+Dalc+Walc,
data=TRAIN)
mod.noedu = lm(deltaG~sex+age+address+famsize+health+Pstatus+Medu+Fedu+famsup+famrel+
activities+romantic+goout+Dalc+Walc,
data=TRAIN)
mod.nofree = lm(deltaG~sex+age+address+famsize+health+Pstatus+Medu+Fedu+famsup+famrel+
studytime+failures+higher+absences+Dalc+Walc,
data=TRAIN)
mod.noalc = lm(deltaG~sex+age+address+famsize+health+Pstatus+Medu+Fedu+famsup+famrel+
studytime+failures+higher+absences+activities+romantic+goout,
data=TRAIN)
anova(mod.nodem,mod.full)
anova(mod.nodem,mod.full)
anova(mod.nopar,mod.full)
anova(mod.noedu,mod.full)
anova(mod.nofree,mod.full)
anova(mod.noalc,mod.full)
anova(mod.nopar,mod.full)
anova(mod.noedu,mod.full)
anova(mod.nofree,mod.full)
anova(mod.noalc,mod.full)
anova(mod.nodem,mod.full)
anova(mod.nopar,mod.full)
anova(mod.noedu,mod.full)
anova(mod.nofree,mod.full)
anova(mod.noalc,mod.full)
mod.small = lm(deltaG~sex+age+address+famsize+health+
studytime+failures+higher+absences+activities+romantic+goout,
data=TRAIN)
summary(mod.small)
cor(TEST$deltaG,predict(mod.empty,newdata=TEST))
TEST$deltaG
predict(mod.empty,newdata=TEST)
cor(TEST$deltaG,predict(mod.empty,newdata=TEST))
r.squared.empty = cor(TEST$deltaG,predict(mod.empty,newdata=TEST))^2
r.squared.full = cor(TEST$deltaG,predict(mod.full,newdata=TEST))^2
r.squared.small = cor(TEST$deltaG,predict(mod.small,newdata=TEST))^2
r.squared.empty = cor(TEST$deltaG,predict(mod.empty,newdata=TEST))^2
r.squared.full = cor(TEST$deltaG,predict(mod.full,newdata=TEST))^2
r.squared.small = cor(TEST$deltaG,predict(mod.small,newdata=TEST))^2
r.squared.empty
r.squared.full
r.squared.small
(TEST$deltaG - predict(mod.empty,newdata=TEST))^2
mean((TEST$deltaG - predict(mod.empty,newdata=TEST))^2)
TEST$deltaG
mean((TEST$deltaG - predict(mod.empty,newdata=TEST))^2)
RMSE.empty = sqrt(mean((TEST$deltaG - predict(mod.empty,newdata=TEST))^2))
RMSE.full = sqrt(mean((TEST$deltaG - predict(mod.full,newdata=TEST))^2))
RMSE.small = sqrt(mean((TEST$deltaG - predict(mod.small,newdata=TEST))^2))
RMSE.empty
RMSE.full
RMSE.small
#This code chunk is for modifying the global options and for loading required R packages
knitr::opts_chunk$set(echo = TRUE)
library(rmarkdown)
library(tinytex)
library(knitr)
library(mosaic)
library(readr)
library(leaps)
RMSE.empty = sqrt(mean((TEST$deltaG - predict(mod.empty,newdata=TEST))^2))
RMSE.full = sqrt(mean((TEST$deltaG - predict(mod.full,newdata=TEST))^2))
RMSE.small = sqrt(mean((TEST$deltaG - predict(mod.small,newdata=TEST))^2))
RMSE.empty
RMSE.full
RMSE.small
