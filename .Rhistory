qqline(stamp$resid)
qqnorm(stamp$resid)
qqline(stamp$resid)
qqnorm(stamp$resid)
qqline(stamp$resid)
qqnorm(stamp$resid)
qqline(stamp$resid)
qqnorm(stamp2$resid)
qqline(stamp2$resid)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
mammal = msleep[1:10,c("name","vore","conservation","brainwt","bodywt")]
kable(mammal)
str(na.omit(mammal))
unique(vore)
dim(mammal)[1]
mammal %>%
ggplot() +
geom_point(BLANK1)
mammal %>%
ggplot() +
geom_point(aes(x=brainwt,y=bodywt,size=vore))
mammal %>%
ggplot() +
geom_smooth(BLANK1)
mammal %>%
ggplot() +
geom_smooth(aes(x=bodywt,y=brainwt),se=FALSE,method="lm")
mammal %>%
ggplot() +
geom_smooth(aes(x=bodywt,y=brainwt),se=FALSE,method=lm)
mammal %>%
ggplot() +
geom_smooth(aes(x=bodywt,y=brainwt),se=FALSE,method=lm)
mammal %>%
ggplot() +
geom_smooth(aes(x=bodywt,y=brainwt),se=FALSE,method=lm)
mammal %>%
ggplot() +
geom_smooth(aes(x=bodywt,y=brainwt),se=FALSE)
mammal %>%
ggplot() +
geom_smooth(aes(x=bodywt,y=brainwt),se=FALSE,method=lm)
mammal %>%
ggplot() +
geom_smooth(aes(x=bodywt,y=brainwt),lm, se=F)
knitr::opts_chunk$set(echo = TRUE)
library(Stat2Data)
library(mosaic)
data("Houses")
mod = lm(Price ~ Size + Lot, data=Houses)
Houses$Predicted = fitted(mod)
plot(x=Houses$Price,y=Houses$Predicted,
xlim=c(100000,400000),
ylim=c(100000,400000))
abline(a=0,b=1,lwd=3,lty=3)
knitr::opts_chunk$set(echo = TRUE)
library(mosaic)
read_csv("lego.csv")
library(mosaic)
lego = read_csv("lego.csv")
View(lego)
unique(lego$Theme)
table(lego$Theme)
lego_2theme = subset(lego, Theme == "Star Wars"| Theme == "Friends")
lego_2theme
library(mosaic)
lego = read_csv("lego.csv")
lego_2theme = subset(lego, Theme == "Star Wars"| Theme == "Friends")
library(mosaic)
lego = read_csv("lego.csv")
lego_2theme = subset(lego, Theme == "Star Wars"| Theme == "Friends")
library(mosaic)
lego = read.csv("lego.csv")
lego_2theme = subset(lego, Theme == "Star Wars"| Theme == "Friends")
str(lego_2theme)
lego_2theme[,c("Theme","Pieces","Amazon_Price")]
t.test(Amazon_Price ~ Theme, data=lego2theme)
library(mosaic)
lego = read.csv("lego.csv")
lego_2theme = subset(lego, Theme == "Star Wars"| Theme == "Friends")
lego_2theme = lego_2theme[,c("Theme","Pieces","Amazon_Price")]
str(lego_2theme)
t.test(Amazon_Price ~ Theme, data=lego_2theme)
t.test(Amazon_Price ~ Theme,, data=lego_2theme)
t.test(Amazon_Price ~ Theme,var.equal=TRUE, data=lego_2theme)
mod = lm(Amazon_Price ~ Theme, data=lego_2theme)
summary(mod)
confint(mod)
mod = lm(Amazon_Price ~ Theme, data=lego_2theme)
summary(mod)
confint(mod)
boxplot(Amazon_Price ~ Theme, data=lego2theme)
boxplot(Amazon_Price ~ Theme, data=lego_2theme)
var(lego_2theme$Amazon_Price[which(lego_2theme$Theme=="Friends")])
var(lego_2theme$Amazon_Price[which(lego_2theme$Theme=="Star Wars")],na.rm=T)
var(lego_2theme$Amazon_Price[which(lego_2theme$Theme=="Friends")],na.rm=T)
var(lego_2theme$Amazon_Price[which(lego_2theme$Theme=="Star Wars")],na.rm=T)
var(lego_2theme$Amazon_Price[which(lego_2theme$Theme=="Friends")],na.rm=T)
boxplot(Amazon_Price ~ Theme, data=lego_2theme)
var(lego_2theme$Amazon_Price[which(lego_2theme$Theme=="Friends")],na.rm=T)
var(lego_2theme$Amazon_Price[which(lego_2theme$Theme=="Star Wars")],na.rm=T)
42.26+38.44
mod2 = lm(Amazon_Price ~Pieces + Theme, data= lego_2theme)
plot(mod2)
mod2 = lm(Amazon_Price ~Pieces + Theme, data= lego_2theme)
summary(mod2)
mod2
summary(mod2)
mod2 = lm(Amazon_Price ~Pieces + Theme, data= lego_2theme)
summary(mod2)
confint(mod2)
plot(Amazon_Price~Pieces,data=lego_2theme)
plot(Amazon_Price~Pieces+Theme,data=lego_2theme)
plot(Amazon_Price~Pieces+Theme,data=lego_2theme)
plot(Amazon_Price~Pieces,data=lego_2theme)
mod2 = lm(Amazon_Price ~Pieces + Theme, data= lego_2theme)
summary(mod2)
confint(mod2)
plot(Amazon_Price~Pieces,data=lego_2theme)
points(x=lego_2theme$Pieces, y=-0.08+0.14*lego_2theme$Pieces,pch="F")
plot(Amazon_Price~Pieces,data=lego_2theme)
points(x=lego_2theme$Pieces, y=-0.08+0.14*lego_2theme$Pieces,pch="F",add=T)
plot(Amazon_Price~Pieces,data=lego_2theme)
curve(-0.08+0.14*x,col="blue")
plot(Amazon_Price~Pieces,data=lego_2theme)
curve(-0.08+0.14*x,col="blue",add=TRUE)
plot(Amazon_Price~Pieces, col="blue",
data=subset(lego_2theme,Theme=='Star Wars'))
points(Amazon_Price~Pieces, col="green",
data=subset(lego_2theme,Theme=='Friends'))
B_Int = summary(modlego2)$coef[1,1]
plot(Amazon_Price~Pieces, col="blue",
data=subset(lego_2theme,Theme=='Star Wars'))
points(Amazon_Price~Pieces, col="green",
data=subset(lego_2theme,Theme=='Friends'))
B_Int = summary(mod2)$coef[1,1]
B_Pieces = summary(mod2)$coef[2,1]
B_Theme = summary(mod2)$coef[3,1]
abline(
B_Int,
B_Pieces,
col = "blue",
)
abline(
B_Int + B_Theme,
B_Pieces,
col = "green",
)
plot(Amazon_Price~Pieces, col="blue",
data=subset(lego_2theme,Theme=='Star Wars'))
points(Amazon_Price~Pieces, col="green",
data=subset(lego_2theme,Theme=='Friends'))
B_Int = summary(mod2)$coef[1,1]
B_Pieces = summary(mod2)$coef[2,1]
B_Theme = summary(mod2)$coef[3,1]
abline(
B_Int,
B_Pieces,
col = "blue",
)
abline(
B_Int + B_Theme,
B_Pieces,
col = "green",
)
plot(Amazon_Price~Pieces, col="blue",
data=subset(lego_2theme,Theme=='Star Wars'))
points(Amazon_Price~Pieces, col="green",
data=subset(lego_2theme,Theme=='Friends'))
B_Int = summary(mod2)$coef[1,1]
B_Pieces = summary(mod2)$coef[2,1]
B_Theme = summary(mod2)$coef[3,1]
abline(
B_Int,
B_Pieces,
col = "blue",
)
abline(
B_Int + B_Theme,
B_Pieces,
col = "red",
)
plot(Amazon_Price~Pieces, col="blue",
data=subset(lego_2theme,Theme=='Star Wars'))
points(Amazon_Price~Pieces, col="red",
data=subset(lego_2theme,Theme=='Friends'))
B_Int = summary(mod2)$coef[1,1]
B_Pieces = summary(mod2)$coef[2,1]
B_Theme = summary(mod2)$coef[3,1]
abline(
B_Int,
B_Pieces,
col = "blue",
)
abline(
B_Int + B_Theme,
B_Pieces,
col = "red",
)
mod3 = lm(Amazon_Price ~Pieces + Theme + I(Pieces*Theme), data= lego_2theme)
mod3 = lm(Amazon_Price ~Pieces + Theme + I(Pieces*Theme), data= lego_2theme)
mod3 = lm(Amazon_Price ~Pieces + Theme + Pieces*Theme, data= lego_2theme)
summary(mod2)
confint(mod2)
mod3 = lm(Amazon_Price ~Pieces + Theme + Pieces*Theme, data= lego_2theme)
summary(mod3)
confint(mod3)
summary(mod2)$coef
plot(Amazon_Price~Pieces, col="blue",
data=subset(lego_2theme,Theme=='Star Wars'))
points(Amazon_Price~Pieces, col="red",
data=subset(lego_2theme,Theme=='Friends'))
B_Int = summary(mod3)$coef[1,1]
B_Pieces = summary(mod3)$coef[2,1]
B_Theme = summary(mod3)$coef[3,1]
abline(
B_Int,
B_Pieces,
col = "blue",
)
abline(
B_Int + B_Theme,
B_Pieces,
col = "red",
)
summary(mod3)$coef
plot(Amazon_Price~Pieces, col="blue",
data=subset(lego_2theme,Theme=='Star Wars'))
points(Amazon_Price~Pieces, col="red",
data=subset(lego_2theme,Theme=='Friends'))
B_Int = summary(mod3)$coef[1,1]
B_Pieces = summary(mod3)$coef[2,1]
B_Theme = summary(mod3)$coef[3,1]
B_PiecesXTheme = summary(mod3)$coef[4,1]
plot(Amazon_Price~Pieces, col="blue",
data=subset(lego_2theme,Theme=='Star Wars'))
points(Amazon_Price~Pieces, col="red",
data=subset(lego_2theme,Theme=='Friends'))
B_Int = summary(mod3)$coef[1,1]
B_Pieces = summary(mod3)$coef[2,1]
B_Theme = summary(mod3)$coef[3,1]
B_PiecesXTheme = summary(mod3)$coef[4,1]
abline(
B_Int,
B_Pieces,
col = "blue",
)
abline(
B_Int + B_Theme,
B_Pieces + B_PiecesXTheme,
col = "red",
)
mod3 = lm(Amazon_Price ~Pieces + Theme + Pieces*Theme, data= lego_2theme)
summary(mod3)
#This code chunk is for modifying the global options and for loading required R packages
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999) #Prevents the use of scientific notation
library(leaps)
library(Stat2Data)
#Create Indicator Variables Manually for Plural Variable
NCB$Twins = ifelse(NCB$Plural==2,1,0)
#Create Indicator Variables Manually for Plural Variable
NCB$Twins = ifelse(NCB$Plural==2,1,0)
#This code chunk is for modifying the global options and for loading required R packages
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999) #Prevents the use of scientific notation
library(leaps)
library(Stat2Data)
data("NCbirths")
NCB = NCbirths[,c("BirthWeightOz","Weeks","Plural","MomRace")]
str(NCB)
#Fit Model with Only MomRace as Predictor Variable
mod.race.1 = lm(BirthWeightOz ~ MomRace,data=NCB)
#Notice that Black is the Current Reference Category
summary(mod.race.1)
#Confidence Intervals for Difference in Mean Birth Weight Between Each Other Race and Black
confint(mod.race.1)
#Representation of Race Groups
table(NCB$MomRace)
#Make Reference Category the Majority: We Can Do This Easily Since MomRace is Factor Variable
NCB$MomRace = relevel(NCB$MomRace,ref=4)
#Refit Model (Compare to Exercise 4.13 in Textbook)
mod.race.2 = lm(BirthWeightOz ~ MomRace,data=NCB)
summary(mod.race.2)
confint(mod.race.2)
#Add Predictions and Residuals to Data
NCB$Pred1 = fitted(mod.race.2)
NCB$Res1 = residuals(mod.race.2)
#Check Assumptions
hist(NCB$Res1) #Normality?
plot(mod.race.2,which=c(2)) #Normality?
plot(mod.race.2, which=c(1)) #Homoscedasticity?
boxplot(Res1~MomRace,data=NCB) #Homoscedasticity?
#Plot of Model (Defaults to Boxplots since x is a Factor Variable)
plot(x=NCB$MomRace,y=NCB$BirthWeightOz)
points(NCB$MomRace,NCB$Pred1,col="red",pch=17,cex=2)
#Fit Model with Only Weeks as Predictor Variable
mod.weeks.1 = lm(BirthWeightOz ~ Weeks,data=NCB)
summary(mod.weeks.1)
NCB$Pred2[!is.na(NCB$Weeks)] = fitted(mod.weeks.1)
NCB$Res2[!is.na(NCB$Weeks)] = residuals(mod.weeks.1)
#Fit Model with Weeks + MomRace as Predictor Variables
mod.weeks.2 = lm(BirthWeightOz~ Weeks + MomRace,data=NCB)
summary(mod.weeks.2)
NCB$Pred3[!is.na(NCB$Weeks)] = fitted(mod.weeks.2)
NCB$Res3[!is.na(NCB$Weeks)] = residuals(mod.weeks.2)
#Fit Model to Include Interaction Variable for Slope
mod.weeks.3 = lm(BirthWeightOz~ Weeks + MomRace + Weeks*MomRace,data=NCB)
summary(mod.weeks.3)
NCB$Pred4[!is.na(NCB$Weeks)] = fitted(mod.weeks.3)
NCB$Res4[!is.na(NCB$Weeks)] = residuals(mod.weeks.3)
#Visualize mod.weeks.3
library(HelpersMG) #Helpful Function Called plot_add()
plot(BirthWeightOz ~ Weeks , data=subset(NCB,MomRace=="black"))
plot_add(Pred4 ~ Weeks , data=subset(NCB,MomRace=="black"),type="l",lwd=2)
plot_add(BirthWeightOz ~ Weeks , data=subset(NCB,MomRace=="hispanic"),col="red")
plot_add(Pred4 ~ Weeks , data=subset(NCB,MomRace=="hispanic"),type="l",col="red",lwd=2)
plot_add(BirthWeightOz ~ Weeks , data=subset(NCB,MomRace=="other"),col="purple")
plot_add(Pred4 ~ Weeks , data=subset(NCB,MomRace=="other"),type="l",col="purple",lwd=2)
plot_add(BirthWeightOz ~ Weeks , data=subset(NCB,MomRace=="white"),col="darkgreen")
plot_add(Pred4 ~ Weeks , data=subset(NCB,MomRace=="white"),type="l",col="darkgreen",lwd=2)
#Create Indicator Variables Manually for Plural Variable
NCB$Twins = ifelse(NCB$Plural==2,1,0)
NCB$Triplets = ifelse(NCB$Plural==3,1,0)
NCB$Plural=NULL
#Stepwise Regression on Full Model
mod.full = lm(BirthWeightOz ~ Weeks + MomRace + Twins + Triplets +
Weeks*MomRace+Weeks*Twins+Weeks*Triplets,data=NCB)
mod.empty = lm(BirthWeightOz ~ 1,data=NCB)
mod.step = step(mod.empty,scope=list(upper=mod.full),direction="both")
#Create Indicator Variables Manually for Plural Variable
NCB$Twins = ifelse(NCB$Plural==2,1,0)
#Create Indicator Variables Manually for Plural Variable
NCB$Twins = ifelse(NCB$Plural==2,1,0)
#This code chunk is for modifying the global options and for loading required R packages
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999) #Prevents the use of scientific notation
library(leaps)
library(Stat2Data)
data("NCbirths")
NCB = NCbirths[,c("BirthWeightOz","Weeks","Plural","MomRace")]
str(NCB)
#Fit Model with Only MomRace as Predictor Variable
mod.race.1 = lm(BirthWeightOz ~ MomRace,data=NCB)
#Notice that Black is the Current Reference Category
summary(mod.race.1)
#Confidence Intervals for Difference in Mean Birth Weight Between Each Other Race and Black
confint(mod.race.1)
#Representation of Race Groups
table(NCB$MomRace)
#Make Reference Category the Majority: We Can Do This Easily Since MomRace is Factor Variable
NCB$MomRace = relevel(NCB$MomRace,ref=4)
#Refit Model (Compare to Exercise 4.13 in Textbook)
mod.race.2 = lm(BirthWeightOz ~ MomRace,data=NCB)
summary(mod.race.2)
confint(mod.race.2)
#Add Predictions and Residuals to Data
NCB$Pred1 = fitted(mod.race.2)
NCB$Res1 = residuals(mod.race.2)
#Check Assumptions
hist(NCB$Res1) #Normality?
plot(mod.race.2,which=c(2)) #Normality?
plot(mod.race.2, which=c(1)) #Homoscedasticity?
boxplot(Res1~MomRace,data=NCB) #Homoscedasticity?
#Plot of Model (Defaults to Boxplots since x is a Factor Variable)
plot(x=NCB$MomRace,y=NCB$BirthWeightOz)
points(NCB$MomRace,NCB$Pred1,col="red",pch=17,cex=2)
#Fit Model with Only Weeks as Predictor Variable
mod.weeks.1 = lm(BirthWeightOz ~ Weeks,data=NCB)
summary(mod.weeks.1)
NCB$Pred2[!is.na(NCB$Weeks)] = fitted(mod.weeks.1)
NCB$Res2[!is.na(NCB$Weeks)] = residuals(mod.weeks.1)
#Fit Model with Weeks + MomRace as Predictor Variables
mod.weeks.2 = lm(BirthWeightOz~ Weeks + MomRace,data=NCB)
summary(mod.weeks.2)
NCB$Pred3[!is.na(NCB$Weeks)] = fitted(mod.weeks.2)
NCB$Res3[!is.na(NCB$Weeks)] = residuals(mod.weeks.2)
#Fit Model to Include Interaction Variable for Slope
mod.weeks.3 = lm(BirthWeightOz~ Weeks + MomRace + Weeks*MomRace,data=NCB)
summary(mod.weeks.3)
NCB$Pred4[!is.na(NCB$Weeks)] = fitted(mod.weeks.3)
NCB$Res4[!is.na(NCB$Weeks)] = residuals(mod.weeks.3)
#Visualize mod.weeks.3
library(HelpersMG) #Helpful Function Called plot_add()
plot(BirthWeightOz ~ Weeks , data=subset(NCB,MomRace=="black"))
plot_add(Pred4 ~ Weeks , data=subset(NCB,MomRace=="black"),type="l",lwd=2)
plot_add(BirthWeightOz ~ Weeks , data=subset(NCB,MomRace=="hispanic"),col="red")
plot_add(Pred4 ~ Weeks , data=subset(NCB,MomRace=="hispanic"),type="l",col="red",lwd=2)
plot_add(BirthWeightOz ~ Weeks , data=subset(NCB,MomRace=="other"),col="purple")
plot_add(Pred4 ~ Weeks , data=subset(NCB,MomRace=="other"),type="l",col="purple",lwd=2)
plot_add(BirthWeightOz ~ Weeks , data=subset(NCB,MomRace=="white"),col="darkgreen")
plot_add(Pred4 ~ Weeks , data=subset(NCB,MomRace=="white"),type="l",col="darkgreen",lwd=2)
#Create Indicator Variables Manually for Plural Variable
NCB$Twins = ifelse(NCB$Plural==2,1,0)
NCB$Triplets = ifelse(NCB$Plural==3,1,0)
NCB$Plural=NULL
#Stepwise Regression on Full Model
mod.full = lm(BirthWeightOz ~ Weeks + MomRace + Twins + Triplets +
Weeks*MomRace+Weeks*Twins+Weeks*Triplets,data=na.omit(NCB))
mod.empty = lm(BirthWeightOz ~ 1,data=na.omit(NCB))
mod.step = step(mod.empty,scope=list(upper=mod.full),direction="both")
summary(mod.step)
AIC(mod.step)
#Create Indicator Variables Manually for Plural Variable
NCB$Twins = ifelse(NCB$Plural==2,1,0)
#Stepwise Regression on Full Model
mod.full = lm(BirthWeightOz ~ Weeks + MomRace + Twins + Triplets +
Weeks*MomRace+Weeks*Twins+Weeks*Triplets,data=na.omit(NCB))
mod.empty = lm(BirthWeightOz ~ 1,data=na.omit(NCB))
mod.step = step(mod.empty,scope=list(upper=mod.full),direction="both")
summary(mod.step)
AIC(mod.step)
summary(mod.full)$sigma
#Create Indicator Variables Manually for Plural Variable
NCB$Twins = ifelse(NCB$Plural==2,1,0)
#Stepwise Regression on Full Model
mod.full = lm(BirthWeightOz ~ Weeks + MomRace + Twins + Triplets +
Weeks*MomRace+Weeks*Twins+Weeks*Triplets,data=na.omit(NCB))
mod.empty = lm(BirthWeightOz ~ 1,data=na.omit(NCB))
mod.step = step(mod.empty,scope=list(upper=mod.full),scale=summary(mod.full)$sigma,direction="both")
summary(mod.step)
AIC(mod.step)
#This code chunk is for modifying the global options and for loading required R packages
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999) #Prevents the use of scientific notation
library(leaps)
library(Stat2Data)
data("NCbirths")
NCB = NCbirths[,c("BirthWeightOz","Weeks","Plural","MomRace")]
str(NCB)
#Fit Model with Only MomRace as Predictor Variable
mod.race.1 = lm(BirthWeightOz ~ MomRace,data=NCB)
#Notice that Black is the Current Reference Category
summary(mod.race.1)
#Confidence Intervals for Difference in Mean Birth Weight Between Each Other Race and Black
confint(mod.race.1)
#Representation of Race Groups
table(NCB$MomRace)
#Make Reference Category the Majority: We Can Do This Easily Since MomRace is Factor Variable
NCB$MomRace = relevel(NCB$MomRace,ref=4)
#Refit Model (Compare to Exercise 4.13 in Textbook)
mod.race.2 = lm(BirthWeightOz ~ MomRace,data=NCB)
summary(mod.race.2)
confint(mod.race.2)
#Add Predictions and Residuals to Data
NCB$Pred1 = fitted(mod.race.2)
NCB$Res1 = residuals(mod.race.2)
#Check Assumptions
hist(NCB$Res1) #Normality?
plot(mod.race.2,which=c(2)) #Normality?
plot(mod.race.2, which=c(1)) #Homoscedasticity?
boxplot(Res1~MomRace,data=NCB) #Homoscedasticity?
#Plot of Model (Defaults to Boxplots since x is a Factor Variable)
plot(x=NCB$MomRace,y=NCB$BirthWeightOz)
points(NCB$MomRace,NCB$Pred1,col="red",pch=17,cex=2)
#Fit Model with Only Weeks as Predictor Variable
mod.weeks.1 = lm(BirthWeightOz ~ Weeks,data=NCB)
summary(mod.weeks.1)
NCB$Pred2[!is.na(NCB$Weeks)] = fitted(mod.weeks.1)
NCB$Res2[!is.na(NCB$Weeks)] = residuals(mod.weeks.1)
#Fit Model with Weeks + MomRace as Predictor Variables
mod.weeks.2 = lm(BirthWeightOz~ Weeks + MomRace,data=NCB)
summary(mod.weeks.2)
NCB$Pred3[!is.na(NCB$Weeks)] = fitted(mod.weeks.2)
NCB$Res3[!is.na(NCB$Weeks)] = residuals(mod.weeks.2)
#Fit Model to Include Interaction Variable for Slope
mod.weeks.3 = lm(BirthWeightOz~ Weeks + MomRace + Weeks*MomRace,data=NCB)
summary(mod.weeks.3)
NCB$Pred4[!is.na(NCB$Weeks)] = fitted(mod.weeks.3)
NCB$Res4[!is.na(NCB$Weeks)] = residuals(mod.weeks.3)
#Visualize mod.weeks.3
library(HelpersMG) #Helpful Function Called plot_add()
plot(BirthWeightOz ~ Weeks , data=subset(NCB,MomRace=="black"))
plot_add(Pred4 ~ Weeks , data=subset(NCB,MomRace=="black"),type="l",lwd=2)
plot_add(BirthWeightOz ~ Weeks , data=subset(NCB,MomRace=="hispanic"),col="red")
plot_add(Pred4 ~ Weeks , data=subset(NCB,MomRace=="hispanic"),type="l",col="red",lwd=2)
plot_add(BirthWeightOz ~ Weeks , data=subset(NCB,MomRace=="other"),col="purple")
plot_add(Pred4 ~ Weeks , data=subset(NCB,MomRace=="other"),type="l",col="purple",lwd=2)
plot_add(BirthWeightOz ~ Weeks , data=subset(NCB,MomRace=="white"),col="darkgreen")
plot_add(Pred4 ~ Weeks , data=subset(NCB,MomRace=="white"),type="l",col="darkgreen",lwd=2)
#Create Indicator Variables Manually for Plural Variable
NCB$Twins = ifelse(NCB$Plural==2,1,0)
NCB$Triplets = ifelse(NCB$Plural==3,1,0)
NCB$Plural=NULL
NCB2 =na.omit(NCB)
#Stepwise Regression on Full Model
mod.full = lm(BirthWeightOz ~ Weeks + MomRace + Twins + Triplets +
Weeks*MomRace+Weeks*Twins+Weeks*Triplets,data=NCB2)
mod.empty = lm(BirthWeightOz ~ 1,data=NCB2)
mod.step = step(mod.empty,scope=list(upper=mod.full),scale=summary(mod.full)$sigma,direction="both")
summary(mod.step)
AIC(mod.step)
AIC(mod.step)
summary(mod.step)
mod.step = step(mod.empty,scope=list(upper=mod.full),scale=summary(mod.full)$sigma,direction="both")
summary(mod.full)$sigma
mod.step = step(mod.empty,scope=list(upper=mod.full),scale=summary(mod.empty)$sigma,direction="both")
summary(mod.step)
AIC(mod.step)
summary(mod.step)
mod.step = step(mod.empty,scope=list(upper=mod.full),scale=summary(mod.empty)$sigma,direction="both")
#Create Indicator Variables Manually for Plural Variable
NCB$Twins = ifelse(NCB$Plural==2,1,0)
#This code chunk is for modifying the global options and for loading required R packages
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999) #Prevents the use of scientific notation
library(leaps)
library(Stat2Data)
#Create Indicator Variables Manually for Plural Variable
NCB$Twins = COMPLETE
