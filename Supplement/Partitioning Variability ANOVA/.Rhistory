species = SpeciesArea # Shorten Name
rm(SpeciesArea) #Removes Old Object from Environment
plot(Species ~ Area,data=species)
plot(Species ~ Area,data=species,pch=16)
plot(Species ~ Area,data=species,pch=16,col="red")
SpeciesModel=lm(Species~Area, data=species)
plot(Species ~ Area,data=species,pch=16,col="red")
plot(Species ~ Area,data=species,pch=16,col="red")
abline(SpeciesModel)
SpeciesModel=lm(Species~Area, data=species)
plot(Species ~ Area,data=species,pch=16,col="blue")
abline(SpeciesModel)
plot(SpeciesModel$residuals~SpeciesModel$fitted.values)
abline(0,0)
SpeciesModel=lm(Species~Area, data=species)
plot(Species ~ Area,data=species,pch=16,col="blue")
abline(SpeciesModel)
plot(SpeciesModel$residuals~SpeciesModel$fitted.values,pch=16,col="blue")
abline(0,0)
library(AER)
data("CASchools")
str(CASchools)
library(AER)
data(CASchools)
data(CASchools)
str(CASchools)
knitr::opts_chunk$set(echo = TRUE)
library(AER)
library(mosaic)
data(CASchools)
str(CASchools)
data("SpeciesArea") # Load Data
species = SpeciesArea # Shorten Name
rm(SpeciesArea) #Removes Old Object from Environment
SpeciesModel=lm(Species~Area, data=species)
plot(Species ~ Area,data=species,pch=16,col="blue")
abline(SpeciesModel)
plot(SpeciesModel$residuals~SpeciesModel$fitted.values,pch=16,col="blue")
abline(0,0)
#This code chunk is for modifying the global options and for loading required R packages
knitr::opts_chunk$set(echo = TRUE)
library(rmarkdown)
library(tinytex)
library(knitr)
library(readr)
library(mosaic) #Install Mosaic Package
library(Stat2Data) #Install Stat2Data
data("SpeciesArea") # Load Data
species = SpeciesArea # Shorten Name
rm(SpeciesArea) #Removes Old Object from Environment
SpeciesModel=lm(Species~Area, data=species)
plot(Species ~ Area,data=species,pch=16,col="blue")
abline(SpeciesModel)
plot(SpeciesModel$residuals~SpeciesModel$fitted.values,pch=16,col="blue")
abline(0,0)
SpeciesModel=lm(Species~Area, data=species)
plot(Species ~ Area,data=species,pch=16,col="blue")
abline(SpeciesModel)
plot(SpeciesModel$residuals~SpeciesModel$fitted.values,pch=16,col="blue")
abline(0,0)
head(Planets, 9)
# message=FALSE, warning=FALSE suppress warnings and messages from appearing in knitted file
library(readr)
library(Stat2Data)
Planets <- read_csv("https://raw.githubusercontent.com/JA-McLean/STOR455/master/data//Planets.csv")
head(Planets, 9)
plot(Year~Distance, data=Planets)
mod2=lm(Year~Distance, data=Planets)
abline(mod2)
plot(mod2$residuals~mod2$fitted.values)
abline(0,0)
qqnorm(mod2$residuals)
qqline(mod2$residuals)
plot(mod2, 1:2)
#Default Plots
plot(SpeciesModel)
SpeciesModel=lm(Species~Area, data=species)
plot(Species ~ Area,data=species,pch=16,col="blue")
abline(SpeciesModel)
plot(SpeciesModel$residuals~SpeciesModel$fitted.values,pch=16,col="blue")
abline(0,0)
plot(SpeciesModel)
SpeciesModel=lm(Species~Area, data=species)
plot(Species ~ Area,data=species,pch=16,col="blue")
abline(SpeciesModel)
plot(SpeciesModel$residuals~SpeciesModel$fitted.values,pch=16,col="blue")
abline(0,0)
qqnorm(SpeciesModel$residuals)
SpeciesModel=lm(Species~Area, data=species)
plot(Species ~ Area,data=species,pch=16,col="blue")
abline(SpeciesModel)
plot(SpeciesModel$residuals~SpeciesModel$fitted.values,pch=16,col="blue")
abline(0,0)
qqnorm(SpeciesModel$residuals)
qqline()
qqnorm(SpeciesModel$residuals)
qqline(SpeciesModel$residuals)
SpeciesModel=lm(Species~Area, data=species)
plot(Species ~ Area,data=species,pch=16,col="blue")
abline(SpeciesModel)
qqnorm(SpeciesModel$residuals)
qqline(SpeciesModel$residuals)
plot(SpeciesModel$residuals~SpeciesModel$fitted.values,pch=16,col="blue")
abline(0,0)
View(Planets)
View(species)
View(species)
plot(SpeciesModel)[c(1,2)]
plot(SpeciesModel)[c(1,2)]
plot(SpeciesModel)[1:2] #Only Want First Two
plot(SpeciesModel)
#See ?plot.lm (6 Plots Available)
#Plot 1: Residuals vs Fitted (We Did This Already)
#Plot 2: Normal QQ (We Did This Already)
#Plot 3: Standardized Residuals vs Fitted (Check for Outliers)
#Plot 4: Not Part of Default
#Plot 5: Residuals vs Leverage (Check for Influence)
#Plot 6: Not Part of Default
plot(SpeciesModel)[1:2] #Only Want First Two
plot(SpeciesModel, which=c(1,2))
plot(SpeciesModel, which=1:2)
plot(SpeciesModel, 1:2)
plot(SpeciesModel) #Default Argument which=c(1,2,3,5)
#See ?plot.lm (6 Plots Available)
#Plot 1: Residuals vs Fitted (We Did This Already)
#Plot 2: Normal QQ (We Did This Already)
#Plot 3: Standardized Residuals vs Fitted (Check for Outliers)
#Plot 4: Not Part of Default
#Plot 5: Residuals vs Leverage (Check for Influence)
#Plot 6: Not Part of Default
plot(SpeciesModel, which=c(1,2)) #Only Want First Two
#plot(SpeciesModel, which=1:2)
#plot(SpeciesModel, 1:2)
sqrt(38)
residuals(SpeciesModel)
#Alternate to SpeciesModel$residuals
residuals(SpeciesModel)
#Alternate to SpeciesModel$residuals
residuals(SpeciesModel)
max(residuals(SpeciesModel)) #Largest
min(residuals(SpeciesModel)) #Smallest
max(abs(residuals(SpeciesModel))) #Farthest Away from 0
which.max(abs(residuals(SpeciesModel)))
species.without.3 = species[-which.max(abs(residuals(SpeciesModel))),]
species.without.3
species
which.max(abs(residuals(SpeciesModel)))
species[-which.max(abs(residuals(SpeciesModel))),]
#Standardizing Residuals
summary(SpeciesModel)
View(SpeciesModel)
sum(residuals(SpeciesModel)^2)
n=length(residuals(SpeciesModel))
SSE
#Standardizing Residuals
SSE=sum(residuals(SpeciesModel)^2)
n=length(residuals(SpeciesModel))
SSE
n
std.error.regression = sqrt(SSE/(n-2))
std.error.regression
std.error.regression
summary(SpeciesModel)
std.error.regression
summary(SpeciesModel)
std.res=residuals(SpeciesModel)/std.error.regression
std.res
plot(y=std.res,x=fitted(SpeciesModel))
abline(h=c(-2,2))
plot(y=std.res,x=fitted(SpeciesModel))
abline(h=c(-2,2))
abline(h=c(-2,2),col="red")
plot(y=std.res,x=fitted(SpeciesModel))
?plot
plot(y=std.res,x=fitted(SpeciesModel),
main="Standardized Residuals Versus Fitted Values",
xlab="Fitted Values", ylab="Standardized Residuals",
ylim=c(-2.5,2.5))
plot(y=std.res,x=fitted(SpeciesModel),
main="Standardized Residuals Versus Fitted Values",
xlab="Fitted Values", ylab="Standardized Residuals",
ylim=c(-2.5,2.5))
abline(h=c(-2,2),col="red")
plot(y=std.res,x=fitted(SpeciesModel),
main="Standardized Residuals Versus Fitted Values",
xlab="Fitted Values", ylab="Standardized Residuals",
ylim=c(-2.5,2.5),
lty=c(2,2))
abline(h=c(-2,2),col="red",lty=c(2,2))
plot(y=std.res,x=fitted(SpeciesModel),
main="Standardized Residuals Versus Fitted Values",
xlab="Fitted Values", ylab="Standardized Residuals",
ylim=c(-2.5,2.5))
abline(h=c(-2,2),col="red",lty=c(2,2))
plot(y=std.res,x=fitted(SpeciesModel),
main="Standardized Residuals Versus Fitted Values",
xlab="Fitted Values", ylab="Standardized Residuals",
ylim=c(-2.5,2.5))
abline(h=c(-2,2),col="red",lty=c(2,2),lwd=c(2,2))
plot(y=std.res,x=fitted(SpeciesModel),
main="Standardized Residuals Versus Fitted Values",
xlab="Fitted Values", ylab="Standardized Residuals",
ylim=c(-2.5,2.5))
abline(h=c(-2,2),col="red",lty=c(2,2),lwd=c(3,3))
std.res=residuals(SpeciesModel)/std.error.regression
plot(y=std.res,x=fitted(SpeciesModel),
main="Standardized Residuals Versus Fitted Values",
xlab="Fitted Values", ylab="Standardized Residuals",
ylim=c(-2.5,2.5))
abline(h=c(-2,2),
col="red",
lty=c(2,2),
lwd=c(3,3))
qqnorm(SpeciesModel$residuals)
qqline(SpeciesModel$residuals)
qqnorm(SpeciesModel$residuals)
qqline(SpeciesModel$residuals)
hist(SpeciesModel$residuals)
qqnorm(SpeciesModel$residuals)
qqline(SpeciesModel$residuals)
hist(SpeciesModel$residuals)
plot(Species ~ Area,data=species,pch=16,col="blue")
abline(SpeciesModel)
qqnorm(SpeciesModel$residuals)
qqline(SpeciesModel$residuals)
hist(SpeciesModel$residuals)
data("SpeciesArea") # Load Data
species = SpeciesArea[,-c(1,2)] # Shorten Name and Remove Last 2 Columns
rm(SpeciesArea) #Removes Old Object from Environment
SpeciesModel=lm(Species~Area, data=species)
data("SpeciesArea") # Load Data
species = SpeciesArea[,-c(4,5)] # Shorten Name and Remove Last 2 Columns
rm(SpeciesArea) #Removes Old Object from Environment
SpeciesModel=lm(Species~Area, data=species)
plot(Species ~ Area,data=species,pch=16,col="blue")
abline(SpeciesModel)
plot(SpeciesModel$residuals~SpeciesModel$fitted.values,pch=16,col="blue")
abline(0,0)
View(species)
# Run the Code and Try All Three To Choose Best
TransMod=lm(Species~log(Area), data=species)
plot(Species ~ log(Area),data=species,pch=16,col="blue")
abline(TransMod)
plot(Species ~ log(Area),data=species,pch=16,col="blue")
abline(TransMod)
plot(TransMod,c(1,2))
plot(Species ~ log(Area),data=species,pch=16,col="blue")
abline(TransMod)
plot(TransMod,c(1,2))
plot(Species ~ log(Area),data=species,pch=16,col="blue")
abline(TransMod)
abline(v=c(4,12))
plot(Species ~ log(Area),data=species,pch=16,col="blue")
abline(TransMod)
abline(v=c(4,12))
plot(Species ~ log(Area),data=species,pch=16,col="blue")
abline(TransMod)
abline(v=c(4,12),col=c("green","green"),lwd=c(3,3),lty=c(2,2))
plot(TransMod,c(1,2))
plot(TransMod,c(1,2))
plot(Species ~ log(Area),data=species,pch=16,col="blue")
abline(TransMod)
abline(v=c(4,12),col=c("green","green"),lwd=c(3,3),lty=c(2,2))
plot(TransMod,c(1,2))
plot(Species ~ log(Area),data=species,pch=16,col="blue")
abline(TransMod)
abline(v=c(4,12),col=c("green","green"),lwd=c(3,3),lty=c(2,2)
plot(Species ~ log(Area),data=species,pch=16,col="blue")
plot(Species ~ log(Area),data=species,pch=16,col="blue")
abline(TransMod)
abline(v=c(4,12),col=c("green","green"),lwd=c(3,3),lty=c(2,2))
TransMod=lm(Species~log(Area), data=species)
plot(Species ~ log(Area),data=species,pch=16,col="blue")
abline(TransMod)
abline(v=c(4.5,12),col=c("green","green"),lwd=c(3,3),lty=c(2,2))
plot(TransMod,c(1,2))
plot(Species ~ log(Area),data=species,pch=16,col="blue")
abline(TransMod)
abline(v=c(5,12),col=c("green","green"),lwd=c(3,3),lty=c(2,2))
plot(Species ~ log(Area),data=species,pch=16,col="blue")
abline(TransMod)
abline(v=c(5,12),col=c("red","red"),lwd=c(3,3),lty=c(3,3))
TransMod=lm(Species~log(Area), data=species)
plot(Species ~ log(Area),data=species,pch=16,col="blue")
abline(TransMod)
#abline(v=c(5,12),col=c("red","red"),lwd=c(3,3),lty=c(3,3)) #Run for First Option
plot(TransMod,c(1,2))
TransMod=lm(log(Species)~Area, data=species)
plot(Species ~ log(Area),data=species,pch=16,col="blue")
abline(TransMod)
TransMod=lm(log(Species)~Area, data=species)
plot(Species ~ log(Area),data=species,pch=16,col="blue")
abline(TransMod)
#abline(v=c(5,12),col=c("red","red"),lwd=c(3,3),lty=c(3,3)) #Run for First Option
plot(TransMod,c(1,2))
TransMod=lm(log(Species)~Area, data=species)
plot(log(Species) ~ Area,data=species,pch=16,col="blue")
abline(TransMod)
#abline(v=c(5,12),col=c("red","red"),lwd=c(3,3),lty=c(3,3)) #Run for First Option
plot(TransMod,c(1,2))
TransMod=lm(log(Species)~log(Area), data=species)
plot(log(Species) ~ log(Area),data=species,pch=16,col="blue")
abline(TransMod)
plot(TransMod,c(1,2))
summary(TransMod)
summary(TransMod)
TransMod=lm(Species~log(Area), data=species)
summary(TransMod)
TransMod=lm(Species~log(Area), data=species)
summary(TransMod)
plot(Species ~ log(Area),data=species,pch=16,col="blue")
abline(TransMod)
#abline(v=c(5,12),col=c("red","red"),lwd=c(3,3),lty=c(3,3)) #Run for First Option
plot(TransMod,c(1,2))
std.error.regression
TransMod=lm(Species~log(Area), data=species)
summary(TransMod)
plot(Species ~ log(Area),data=species,pch=16,col="blue")
abline(TransMod)
#abline(v=c(5,12),col=c("red","red"),lwd=c(3,3),lty=c(3,3)) #Run for First Option
plot(TransMod,c(1,2))
TransMod=lm(log(Species)~Area, data=species)
summary(TransMod)
plot(log(Species) ~ Area,data=species,pch=16,col="blue")
abline(TransMod)
plot(TransMod,c(1,2))
TransMod=lm(log(Species)~log(Area), data=species)
summary(TransMod)
plot(log(Species) ~ log(Area),data=species,pch=16,col="blue")
abline(TransMod)
plot(TransMod,c(1,2))
fitted(TransMod)
Species$res = fitted(TransMod)
Species$fit = fitted(TransMod)
Species$res = fitted(TransMod)
coef(TransMod)
species$logfit = fitted(TransMod)
coef(TransMod)
species$fit = exp(beta0+beta1*species$logfit)
coef(TransMod)
beta0=coef(TransMod)[1]
beta1=coef(TransMod)[2]
species$logfit = fitted(TransMod)
species$fit = exp(beta0+beta1*species$logfit)
View(species)
beta0
beta1
species$res = species$Species - species$fit
View(species)
sqrt(sum(species$res^2)/(length(species$res)-2))
species$fit = exp(beta0+beta1*species$Area)
species$res = species$Species - species$fit
species$fit1 = exp(species$logfit)
coef(TransMod)
beta0=coef(TransMod)[1]
beta1=coef(TransMod)[2]
species$logfit = fitted(TransMod)
species$fit1 = exp(species$logfit)
species$fit2= exp(beta0+beta1*species$Area)
species$res = species$Species - species$fit
sqrt(sum(species$res^2)/(length(species$res)-2))
coef(TransMod)
beta0=coef(TransMod)[1]
beta1=coef(TransMod)[2]
species$logfit = fitted(TransMod)
species$fit1 = exp(species$logfit)
species$fit2= exp(beta0+beta1*species$Area)
species$res = species$Species - species$fit1
sqrt(sum(species$res^2)/(length(species$res)-2))
View(species)
species$logfit
exp(species$logfit)
exp(beta0+beta1*species$Area)
exp(beta0+beta1*log(species$Area)
species$fit2= exp(beta0+beta1*log(species$Area))
species$fit2= exp(beta0+beta1*log(species$Area))
species$res = species$Species - species$fit1
species$logfit = fitted(TransMod)
species$fit1 = exp(species$logfit)
species$fit2= exp(beta0+beta1*log(species$Area))
species$res = species$Species - species$fit1
View(species)
#Recall Property of Logs
10^log10(5)
exp(log(5))
exp(log(7))
plot(Species~Area, data=species)
plot(Species~Area, data=species)
curve(exp(beta0+beta1*x), add=TRUE)
curve(exp(beta0+beta1*log(x)), add=TRUE)
plot(Species~Area, data=species)
curve(exp(beta0+beta1*log(x)), add=TRUE)
curve(exp(beta0+beta1*log(x)), add=TRUE, col="red")
plot(Species~Area, data=species)
curve(exp(beta0+beta1*log(x)), add=TRUE, col="red")
View(species)
species
#Extrapolate for the Island Australia (7,700,000 km^2)
exp(beta0+beta1*log(7700000))
exp(beta0+beta1*log(7700000))
coef(TransMod)
numeric(coef(TransMod))
as.numeric(coef(TransMod))
#Extract Coefficients
as.numeric(coef(TransMod))
beta0=as.numeric(coef(TransMod))[1]
beta1=as.numeric(coef(TransMod))[2]
#Extrapolate for the Island Australia (7,700,000 km^2)
exp(beta0+beta1*log(7700000))
plot(Species~Area, data=species,xlim=c(0,7700000))
curve(exp(beta0+beta1*log(x)), add=TRUE, col="red")
plot(Species~Area, data=species,xlim=c(0,7700000))
curve(exp(beta0+beta1*log(x)), add=TRUE, col="red")
plot(Species~Area, data=species,xlim=c(0,7700000))
curve(exp(beta0+beta1*log(x)), add=TRUE, col="red")
plot(Species~Area, data=species,xlim=c(0,7700000))
plot(0,20,add=TRUE)
plot(Species~Area, data=species,xlim=c(0,7700000))
plot(2000,20,add=TRUE)
plot(Species~Area, data=species,xlim=c(0,7700000))
points(2000,20,add=TRUE)
plot(Species~Area, data=species,xlim=c(0,7700000))
points(2000,20)
points(2000,20,col="red",pch=16)
plot(Species~Area, data=species,xlim=c(0,7700000))
points(2000,20,col="red",pch=16)
plot(Species~Area, data=species,xlim=c(0,7700000))
points(7700000,exp(beta0+beta1*log(7700000)),col="red",pch=16)
curve(exp(beta0+beta1*log(x)), add=TRUE, col="red")
plot(Species~Area, data=species,xlim=c(0,7700000),ylim=c(0,exp(beta0+beta1*log(7700000))))
points(7700000,exp(beta0+beta1*log(7700000)),col="red",pch=16)
curve(exp(beta0+beta1*log(x)), add=TRUE, col="red")
exp(beta0+beta1*log(7700000))
plot(Species~Area, data=species,xlim=c(0,7700000),ylim=c(0,213)))
plot(Species~Area, data=species,xlim=c(0,7700000),ylim=c(0,213)))
plot(Species~Area, data=species,xlim=c(0,7700000),ylim=c(0,213))
points(7700000,exp(beta0+beta1*log(7700000)),col="red",pch=16)
curve(exp(beta0+beta1*log(x)), add=TRUE, col="red")
plot(Species~Area, data=species,xlim=c(0,7700000),ylim=c(0,213))
points(7700000,exp(beta0+beta1*log(7700000)),col="blue",pch=16)
curve(exp(beta0+beta1*log(x)), add=TRUE, col="red")
points(7700000,exp(beta0+beta1*log(7700000)),col="blue",pch=16,size=13)
plot(Species~Area, data=species,xlim=c(0,7700000),ylim=c(0,213))
curve(exp(beta0+beta1*log(x)), add=TRUE, col="red")
points(7700000,exp(beta0+beta1*log(7700000)),col="blue",pch=16,size=13)
plot(Species~Area, data=species,xlim=c(0,7700000),ylim=c(0,213))
curve(exp(beta0+beta1*log(x)), add=TRUE, col="red")
points(7700000,exp(beta0+beta1*log(7700000)),col="blue",pch=16)
plot(Species~Area, data=species,xlim=c(0,7700000),ylim=c(0,213))
curve(exp(beta0+beta1*log(x)), add=TRUE, col="red")
points(7700000,exp(beta0+beta1*log(7700000)),col="blue",pch=16,cex=3)
plot(Species~Area, data=species,xlim=c(0,7700000),ylim=c(0,400))
curve(exp(beta0+beta1*log(x)), add=TRUE, col="red")
points(7700000,379,col="blue",pch=16,cex=3)
plot(Species~Area, data=species,xlim=c(0,7700000),ylim=c(0,400))
curve(exp(beta0+beta1*log(x)), add=TRUE, col="red")
points(7700000,379,col="blue",pch=16,cex=3)
#This code chunk is for modifying the global options and for loading required R packages
knitr::opts_chunk$set(echo = TRUE)
library(rmarkdown)
library(tinytex)
library(knitr)
library(readr)
library(mosaic) #Install Mosaic Package
library(Stat2Data) #Install Stat2Data
data("SpeciesArea") # Load Data
species = SpeciesArea[,-c(4,5)] # Shorten Name and Remove Last 2 Columns
rm(SpeciesArea) #Removes Old Object from Environment
head(species)
plot(SpeciesModel) #Default Argument which=c(1,2,3,5)
#See ?plot.lm (6 Plots Available)
#Plot 1: Residuals vs Fitted (We Did This Already)
#Plot 2: Normal QQ (We Did This Already)
#Plot 3: Square Root of Absolute Standardized Residual vs Fitted (Check for Outliers)
#Plot 4: Not Part of Default
#Plot 5: Residuals vs Leverage (Check for Influence)
#Plot 6: Not Part of Default
plot(SpeciesModel, which=c(1,2)) #Only Want First Two
#plot(SpeciesModel, which=1:2)
#plot(SpeciesModel, 1:2)
10^log10(5)
exp(log(7))
#Recall Property of Logs
10^log10(5)
exp(log(7))
#Extract Coefficients
as.numeric(coef(TransMod))
beta0=as.numeric(coef(TransMod))[1]
beta1=as.numeric(coef(TransMod))[2]
#Raw Predictions of Log(Species)
species$logfit = fitted(TransMod)
#2 Methods for Predictions of Actual Species
species$fit1 = exp(species$logfit)
species$fit2= exp(beta0+beta1*log(species$Area))
species$fit3 = exp(beta0)*x^beta1
View(species)
species$fit3 = exp(beta0)*x^beta1
#Recall Property of Logs
10^log10(5)
exp(log(7))
#Extract Coefficients
as.numeric(coef(TransMod))
beta0=as.numeric(coef(TransMod))[1]
beta1=as.numeric(coef(TransMod))[2]
#Raw Predictions of Log(Species)
species$logfit = fitted(TransMod)
#2 Methods for Predictions of Actual Species
species$fit1 = exp(species$logfit)
species$fit2= exp(beta0+beta1*log(species$Area))
species$fit3 = exp(beta0)*x^beta1
species$fit3 = exp(beta0)*species$Area^beta1
View(species)
