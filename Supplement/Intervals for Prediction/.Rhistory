plot(Species ~ log(Area),data=species,pch=16,col="blue")
abline(TransMod)
abline(v=c(4.5,12),col=c("green","green"),lwd=c(3,3),lty=c(2,2))
plot(TransMod,c(1,2))
plot(Species ~ log(Area),data=species,pch=16,col="blue")
abline(TransMod)
abline(v=c(5,12),col=c("green","green"),lwd=c(3,3),lty=c(2,2))
plot(Species ~ log(Area),data=species,pch=16,col="blue")
abline(TransMod)
abline(v=c(5,12),col=c("red","red"),lwd=c(3,3),lty=c(3,3))
TransMod=lm(Species~log(Area), data=species)
plot(Species ~ log(Area),data=species,pch=16,col="blue")
abline(TransMod)
#abline(v=c(5,12),col=c("red","red"),lwd=c(3,3),lty=c(3,3)) #Run for First Option
plot(TransMod,c(1,2))
TransMod=lm(log(Species)~Area, data=species)
plot(Species ~ log(Area),data=species,pch=16,col="blue")
abline(TransMod)
TransMod=lm(log(Species)~Area, data=species)
plot(Species ~ log(Area),data=species,pch=16,col="blue")
abline(TransMod)
#abline(v=c(5,12),col=c("red","red"),lwd=c(3,3),lty=c(3,3)) #Run for First Option
plot(TransMod,c(1,2))
TransMod=lm(log(Species)~Area, data=species)
plot(log(Species) ~ Area,data=species,pch=16,col="blue")
abline(TransMod)
#abline(v=c(5,12),col=c("red","red"),lwd=c(3,3),lty=c(3,3)) #Run for First Option
plot(TransMod,c(1,2))
TransMod=lm(log(Species)~log(Area), data=species)
plot(log(Species) ~ log(Area),data=species,pch=16,col="blue")
abline(TransMod)
plot(TransMod,c(1,2))
summary(TransMod)
summary(TransMod)
TransMod=lm(Species~log(Area), data=species)
summary(TransMod)
TransMod=lm(Species~log(Area), data=species)
summary(TransMod)
plot(Species ~ log(Area),data=species,pch=16,col="blue")
abline(TransMod)
#abline(v=c(5,12),col=c("red","red"),lwd=c(3,3),lty=c(3,3)) #Run for First Option
plot(TransMod,c(1,2))
std.error.regression
TransMod=lm(Species~log(Area), data=species)
summary(TransMod)
plot(Species ~ log(Area),data=species,pch=16,col="blue")
abline(TransMod)
#abline(v=c(5,12),col=c("red","red"),lwd=c(3,3),lty=c(3,3)) #Run for First Option
plot(TransMod,c(1,2))
TransMod=lm(log(Species)~Area, data=species)
summary(TransMod)
plot(log(Species) ~ Area,data=species,pch=16,col="blue")
abline(TransMod)
plot(TransMod,c(1,2))
TransMod=lm(log(Species)~log(Area), data=species)
summary(TransMod)
plot(log(Species) ~ log(Area),data=species,pch=16,col="blue")
abline(TransMod)
plot(TransMod,c(1,2))
fitted(TransMod)
Species$res = fitted(TransMod)
Species$fit = fitted(TransMod)
Species$res = fitted(TransMod)
coef(TransMod)
species$logfit = fitted(TransMod)
coef(TransMod)
species$fit = exp(beta0+beta1*species$logfit)
coef(TransMod)
beta0=coef(TransMod)[1]
beta1=coef(TransMod)[2]
species$logfit = fitted(TransMod)
species$fit = exp(beta0+beta1*species$logfit)
View(species)
beta0
beta1
species$res = species$Species - species$fit
View(species)
sqrt(sum(species$res^2)/(length(species$res)-2))
species$fit = exp(beta0+beta1*species$Area)
species$res = species$Species - species$fit
species$fit1 = exp(species$logfit)
coef(TransMod)
beta0=coef(TransMod)[1]
beta1=coef(TransMod)[2]
species$logfit = fitted(TransMod)
species$fit1 = exp(species$logfit)
species$fit2= exp(beta0+beta1*species$Area)
species$res = species$Species - species$fit
sqrt(sum(species$res^2)/(length(species$res)-2))
coef(TransMod)
beta0=coef(TransMod)[1]
beta1=coef(TransMod)[2]
species$logfit = fitted(TransMod)
species$fit1 = exp(species$logfit)
species$fit2= exp(beta0+beta1*species$Area)
species$res = species$Species - species$fit1
sqrt(sum(species$res^2)/(length(species$res)-2))
View(species)
species$logfit
exp(species$logfit)
exp(beta0+beta1*species$Area)
exp(beta0+beta1*log(species$Area)
species$fit2= exp(beta0+beta1*log(species$Area))
species$fit2= exp(beta0+beta1*log(species$Area))
species$res = species$Species - species$fit1
species$logfit = fitted(TransMod)
species$fit1 = exp(species$logfit)
species$fit2= exp(beta0+beta1*log(species$Area))
species$res = species$Species - species$fit1
View(species)
#Recall Property of Logs
10^log10(5)
exp(log(5))
exp(log(7))
plot(Species~Area, data=species)
plot(Species~Area, data=species)
curve(exp(beta0+beta1*x), add=TRUE)
curve(exp(beta0+beta1*log(x)), add=TRUE)
plot(Species~Area, data=species)
curve(exp(beta0+beta1*log(x)), add=TRUE)
curve(exp(beta0+beta1*log(x)), add=TRUE, col="red")
plot(Species~Area, data=species)
curve(exp(beta0+beta1*log(x)), add=TRUE, col="red")
View(species)
species
#Extrapolate for the Island Australia (7,700,000 km^2)
exp(beta0+beta1*log(7700000))
exp(beta0+beta1*log(7700000))
coef(TransMod)
numeric(coef(TransMod))
as.numeric(coef(TransMod))
#Extract Coefficients
as.numeric(coef(TransMod))
beta0=as.numeric(coef(TransMod))[1]
beta1=as.numeric(coef(TransMod))[2]
#Extrapolate for the Island Australia (7,700,000 km^2)
exp(beta0+beta1*log(7700000))
plot(Species~Area, data=species,xlim=c(0,7700000))
curve(exp(beta0+beta1*log(x)), add=TRUE, col="red")
plot(Species~Area, data=species,xlim=c(0,7700000))
curve(exp(beta0+beta1*log(x)), add=TRUE, col="red")
plot(Species~Area, data=species,xlim=c(0,7700000))
curve(exp(beta0+beta1*log(x)), add=TRUE, col="red")
plot(Species~Area, data=species,xlim=c(0,7700000))
plot(0,20,add=TRUE)
plot(Species~Area, data=species,xlim=c(0,7700000))
plot(2000,20,add=TRUE)
plot(Species~Area, data=species,xlim=c(0,7700000))
points(2000,20,add=TRUE)
plot(Species~Area, data=species,xlim=c(0,7700000))
points(2000,20)
points(2000,20,col="red",pch=16)
plot(Species~Area, data=species,xlim=c(0,7700000))
points(2000,20,col="red",pch=16)
plot(Species~Area, data=species,xlim=c(0,7700000))
points(7700000,exp(beta0+beta1*log(7700000)),col="red",pch=16)
curve(exp(beta0+beta1*log(x)), add=TRUE, col="red")
plot(Species~Area, data=species,xlim=c(0,7700000),ylim=c(0,exp(beta0+beta1*log(7700000))))
points(7700000,exp(beta0+beta1*log(7700000)),col="red",pch=16)
curve(exp(beta0+beta1*log(x)), add=TRUE, col="red")
exp(beta0+beta1*log(7700000))
plot(Species~Area, data=species,xlim=c(0,7700000),ylim=c(0,213)))
plot(Species~Area, data=species,xlim=c(0,7700000),ylim=c(0,213)))
plot(Species~Area, data=species,xlim=c(0,7700000),ylim=c(0,213))
points(7700000,exp(beta0+beta1*log(7700000)),col="red",pch=16)
curve(exp(beta0+beta1*log(x)), add=TRUE, col="red")
plot(Species~Area, data=species,xlim=c(0,7700000),ylim=c(0,213))
points(7700000,exp(beta0+beta1*log(7700000)),col="blue",pch=16)
curve(exp(beta0+beta1*log(x)), add=TRUE, col="red")
points(7700000,exp(beta0+beta1*log(7700000)),col="blue",pch=16,size=13)
plot(Species~Area, data=species,xlim=c(0,7700000),ylim=c(0,213))
curve(exp(beta0+beta1*log(x)), add=TRUE, col="red")
points(7700000,exp(beta0+beta1*log(7700000)),col="blue",pch=16,size=13)
plot(Species~Area, data=species,xlim=c(0,7700000),ylim=c(0,213))
curve(exp(beta0+beta1*log(x)), add=TRUE, col="red")
points(7700000,exp(beta0+beta1*log(7700000)),col="blue",pch=16)
plot(Species~Area, data=species,xlim=c(0,7700000),ylim=c(0,213))
curve(exp(beta0+beta1*log(x)), add=TRUE, col="red")
points(7700000,exp(beta0+beta1*log(7700000)),col="blue",pch=16,cex=3)
plot(Species~Area, data=species,xlim=c(0,7700000),ylim=c(0,400))
curve(exp(beta0+beta1*log(x)), add=TRUE, col="red")
points(7700000,379,col="blue",pch=16,cex=3)
plot(Species~Area, data=species,xlim=c(0,7700000),ylim=c(0,400))
curve(exp(beta0+beta1*log(x)), add=TRUE, col="red")
points(7700000,379,col="blue",pch=16,cex=3)
#This code chunk is for modifying the global options and for loading required R packages
knitr::opts_chunk$set(echo = TRUE)
library(rmarkdown)
library(tinytex)
library(knitr)
library(readr)
library(mosaic) #Install Mosaic Package
library(Stat2Data) #Install Stat2Data
data("SpeciesArea") # Load Data
species = SpeciesArea[,-c(4,5)] # Shorten Name and Remove Last 2 Columns
rm(SpeciesArea) #Removes Old Object from Environment
head(species)
plot(SpeciesModel) #Default Argument which=c(1,2,3,5)
#See ?plot.lm (6 Plots Available)
#Plot 1: Residuals vs Fitted (We Did This Already)
#Plot 2: Normal QQ (We Did This Already)
#Plot 3: Square Root of Absolute Standardized Residual vs Fitted (Check for Outliers)
#Plot 4: Not Part of Default
#Plot 5: Residuals vs Leverage (Check for Influence)
#Plot 6: Not Part of Default
plot(SpeciesModel, which=c(1,2)) #Only Want First Two
#plot(SpeciesModel, which=1:2)
#plot(SpeciesModel, 1:2)
10^log10(5)
exp(log(7))
#Recall Property of Logs
10^log10(5)
exp(log(7))
#Extract Coefficients
as.numeric(coef(TransMod))
beta0=as.numeric(coef(TransMod))[1]
beta1=as.numeric(coef(TransMod))[2]
#Raw Predictions of Log(Species)
species$logfit = fitted(TransMod)
#2 Methods for Predictions of Actual Species
species$fit1 = exp(species$logfit)
species$fit2= exp(beta0+beta1*log(species$Area))
species$fit3 = exp(beta0)*x^beta1
View(species)
species$fit3 = exp(beta0)*x^beta1
#Recall Property of Logs
10^log10(5)
exp(log(7))
#Extract Coefficients
as.numeric(coef(TransMod))
beta0=as.numeric(coef(TransMod))[1]
beta1=as.numeric(coef(TransMod))[2]
#Raw Predictions of Log(Species)
species$logfit = fitted(TransMod)
#2 Methods for Predictions of Actual Species
species$fit1 = exp(species$logfit)
species$fit2= exp(beta0+beta1*log(species$Area))
species$fit3 = exp(beta0)*x^beta1
species$fit3 = exp(beta0)*species$Area^beta1
View(species)
#This code chunk is for modifying the global options and for loading required R packages
knitr::opts_chunk$set(echo = TRUE)
library(rmarkdown)
library(tinytex)
library(knitr)
library(readr)
library(mosaic) #Install Mosaic Package
library(AER)
data("Fatalities") # Load Data
fatal = Fatalities[,c("fatal","pop","youngdrivers")]
head(fatal)
#Consider scatterplot
plot(x=fatal$pop,y=fatal$fatal)
#Create New Variable Called adj_fatal
fatal$adj_fatal = (fatal$fatal/fatal$pop)*1000
#Remove Original Variable
fatal$fatal = NULL
#Preview Modified Dataset
head(fatal)
#Consider new scatterplot
plot(x=fatal$pop,y=fatal$adj_fatal)
mod = lm(adj_fatal~youngdrivers,data=fatal)
mod = lm(adj_fatal~youngdrivers,data=fatal)
summary(mod)
mod = lm(adj_fatal~youngdrivers,data=fatal)
summary(mod)
plot(adj_fatal~youngdrivers,data=fatal)
mod = lm(adj_fatal~youngdrivers,data=fatal)
summary(mod)
plot(adj_fatal~youngdrivers,data=fatal)
abline(mod)
mod = lm(adj_fatal~youngdrivers,data=fatal)
summary(mod)
plot(adj_fatal~youngdrivers,data=fatal)
abline(mod)
plot(adj_fatal~youngdrivers,data=fatal)
mod = lm(adj_fatal~youngdrivers,data=fatal)
summary(mod)
#We have found significance. Hooray!!. Let's visualize the model.
plot(adj_fatal~youngdrivers,data=fatal)
abline(mod)
confint(mod)
#Overwrite variable for youngdrivers to help interpretation of the slope
fatal$youngdrivers=fatal$youngdrivers*100
#Model for the relationship between fatalities and proportion of young drivers.
#Overwrite variable for youngdrivers to help interpretation of the slope
fatal$youngdrivers=fatal$youngdrivers*100
mod = lm(adj_fatal~youngdrivers,data=fatal)
summary(mod)
#We have found significance. Hooray!!. Let's visualize the model.
plot(adj_fatal~youngdrivers,data=fatal)
abline(mod)
#This code chunk is for modifying the global options and for loading required R packages
knitr::opts_chunk$set(echo = TRUE)
library(rmarkdown)
library(tinytex)
library(knitr)
library(readr)
library(mosaic) #Install Mosaic Package
library(AER)
data("Fatalities") # Load Data
fatal = Fatalities[,c("fatal","pop","youngdrivers")]
head(fatal)
#Consider scatterplot
plot(x=fatal$pop,y=fatal$fatal)
#Create New Variable Called adj_fatal
fatal$adj_fatal = (fatal$fatal/fatal$pop)*1000
#Remove Original Variable
fatal$fatal = NULL
#Preview Modified Dataset
head(fatal)
#Consider new scatterplot
plot(x=fatal$pop,y=fatal$adj_fatal)
#Model for the relationship between fatalities and proportion of young drivers.
#Overwrite variable for youngdrivers to help interpretation of the slope
fatal$youngdrivers=fatal$youngdrivers*100
mod = lm(adj_fatal~youngdrivers,data=fatal)
summary(mod)
#We have found significance. Hooray!!. Let's visualize the model.
plot(adj_fatal~youngdrivers,data=fatal)
abline(mod)
#Model for the relationship between fatalities and proportion of young drivers.
#Create new variable for youngdrivers to help interpretation of slope
fatal$yd=fatal$youngdrivers*100
mod = lm(adj_fatal~youngdrivers,data=fatal)
summary(mod)
#We have found significance. Hooray!!. Let's visualize the model.
plot(adj_fatal~youngdrivers,data=fatal)
abline(mod)
#This code chunk is for modifying the global options and for loading required R packages
knitr::opts_chunk$set(echo = TRUE)
library(rmarkdown)
library(tinytex)
library(knitr)
library(readr)
library(mosaic) #Install Mosaic Package
library(AER)
data("Fatalities") # Load Data
fatal = Fatalities[,c("fatal","pop","youngdrivers")]
head(fatal)
#Consider scatterplot
plot(x=fatal$pop,y=fatal$fatal)
#Create New Variable Called adj_fatal
fatal$adj_fatal = (fatal$fatal/fatal$pop)*1000
#Remove Original Variable
fatal$fatal = NULL
#Preview Modified Dataset
head(fatal)
#Consider new scatterplot
plot(x=fatal$pop,y=fatal$adj_fatal)
#Model for the relationship between fatalities and proportion of young drivers.
#Create new variable for youngdrivers to help interpretation of slope
fatal$yd=fatal$youngdrivers*100
mod = lm(adj_fatal~youngdrivers,data=fatal)
summary(mod)
#We have found significance. Hooray!!. Let's visualize the model.
plot(adj_fatal~youngdrivers,data=fatal)
abline(mod)
#Model for the relationship between fatalities and proportion of young drivers.
#Create new variable for youngdrivers to help interpretation of slope
fatal$yd=fatal$youngdrivers*100
mod = lm(adj_fatal~youngdrivers,data=fatal)
summary(mod)
mod = lm(adj_fatal~yd,data=fatal)
summary(mod)
#We have found significance. Hooray!!. Let's visualize the model.
plot(adj_fatal~yd,data=fatal)
abline(mod)
anova(adj_fatal~yd,data=fatal)
anova(mod,data=fatal)
anova(mod,data=fatal)
#Model for the relationship between fatalities and proportion of young drivers.
#Create new variable for youngdrivers to help interpretation of slope
fatal$yd=fatal$youngdrivers*100
mod = lm(adj_fatal~youngdrivers,data=fatal)
summary(mod)
mod = lm(adj_fatal~yd,data=fatal)
summary(mod)
#We have found significance. Hooray!!. Let's visualize the model.
plot(adj_fatal~yd,data=fatal)
abline(mod)
confint(mod)
anova(mod,data=fatal)
1.41e-05
#This code chunk is for modifying the global options and for loading required R packages
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999) #Prevents the use of scientific notation
library(rmarkdown)
library(tinytex)
library(knitr)
library(readr)
library(mosaic) #Install Mosaic Package
library(AER)
data("Fatalities") # Load Data
fatal = Fatalities[,c("fatal","pop","youngdrivers")]
head(fatal)
#Consider scatterplot
plot(x=fatal$pop,y=fatal$fatal)
#Create New Variable Called adj_fatal
fatal$adj_fatal = (fatal$fatal/fatal$pop)*1000
#Remove Original Variable
fatal$fatal = NULL
#Preview Modified Dataset
head(fatal)
#Consider new scatterplot
plot(x=fatal$pop,y=fatal$adj_fatal)
#Model for the relationship between fatalities and proportion of young drivers.
#Create new variable for youngdrivers to help interpretation of slope
fatal$yd=fatal$youngdrivers*100
mod = lm(adj_fatal~youngdrivers,data=fatal)
summary(mod)
mod = lm(adj_fatal~yd,data=fatal)
summary(mod)
#We have found significance. Hooray!!. Let's visualize the model.
plot(adj_fatal~yd,data=fatal)
abline(mod)
1.41e-05
View(fatal)
View(fatal)
mean(fatal$pop)
mean(fatal$youngdrivers
mean(fatal$youngdrivers)
mean(fatal$youngdrivers)
mean(fatal$yd)
mean(fatal$adj_fatal)
anova(modlego2)
library(readr)
library(Stat2Data)
lego <- read_csv("https://raw.githubusercontent.com/JA-McLean/STOR455/master/data/lego.csv")
lego_under_800_pieces = subset(lego, Pieces < 800)
modlego2 = lm(Amazon_Price^(0.3)~Pieces, data=lego_under_800_pieces)
plot(Amazon_Price^(0.3)~Pieces, data=lego_under_800_pieces)
abline(modlego2, col="red")
summary(modlego2)
plot(modlego2, c(1, 2, 5))
cor(lego_under_800_pieces$Pieces, lego_under_800_pieces$Amazon_Price^(0.3))
cor(
lego_under_800_pieces$Pieces,
lego_under_800_pieces$Amazon_Price^(0.3),
use="complete.obs"
)
data(Houses)
head(Houses)
cor(Houses)
data(Cereal)
head(Cereal)
#cor(Cereal)
cor(Cereal[c(2:4)])
cor.test(lego_under_800_pieces$Pieces, lego_under_800_pieces$Amazon_Price^(0.3))
cor(lego_under_800_pieces$Pieces, lego_under_800_pieces$Amazon_Price^(0.3))
cor(
lego_under_800_pieces$Pieces,
lego_under_800_pieces$Amazon_Price^(0.3),
use="complete.obs"
)
data(Houses)
head(Houses)
cor(Houses)
anova(modlego2)
confint(mod)
#Model for the relationship between fatalities and proportion of young drivers.
#Create new variable for youngdrivers to help interpretation of slope
fatal$yd=fatal$youngdrivers*100
mod = lm(adj_fatal~youngdrivers,data=fatal)
summary(mod)
mod = lm(adj_fatal~yd,data=fatal)
summary(mod)
#We have found significance. Hooray!!. Let's visualize the model.
plot(adj_fatal~yd,data=fatal)
abline(mod)
1.41e-05
anova(mod,data=fatal)
anova(mod)
anova(mod)
#Hand Calculation of SST
sum((fatal$adj_fatal-mean(fatal$adj_fatal))^2)
#Notice that this equals the sum from the ANOVA table
0.0598+1.02930
#Hand Calculation of SST
sum((fatal$adj_fatal-mean(fatal$adj_fatal))^2)
#Notice that this equals the sum from the ANOVA table
0.0598+1.02930
summary(mod)
#Manually calculate p-value using the t-distribution
pt(0.5,334,lower.tail=T)
#Manually calculate p-value using the t-distribution
pt(0,334,lower.tail=T)
summary(mod)
qt(0.5,334)
qt(0,334)
qt(0.1,334)
pt(4.407,334,lower.tail=F)
#Manually calculate p-value using the t-distribution
pt(4.407,334,lower.tail=T) #Find area to right and multiply by 2
2*(1-pt(4.407,334,lower.tail=T))
summary(mod)
anova(mod)
#Manually find the p-value and check it matches
pf(19.422,1,334,lower.tail=FALSE) #Want the area to the right of 19.422
#This code chunk is for modifying the global options and for loading required R packages
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999) #Prevents the use of scientific notation
library(rmarkdown)
library(tinytex)
library(knitr)
library(readr)
library(mosaic) #Install Mosaic Package
library(AER)
#Consider scatterplot
plot(x=fatal$pop,y=fatal$fatal)
#Create New Variable Called adj_fatal
fatal$adj_fatal = (fatal$fatal/fatal$pop)*1000
